<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[移动端利用重力控制屏幕滚动]]></title>
      <url>http://ningbo00.top/2017/07/21/gravityScroll/</url>
      <content type="html"><![CDATA[<h1 id="gravityScroll"><a href="#gravityScroll" class="headerlink" title="gravityScroll"></a>gravityScroll</h1><p>移动端利用重力控制屏幕滚动，基于DOM</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="http://go.163.com/2015/public/team/ningbo/gravityScroll/" target="_blank" rel="external">Demo 点击查看</a></p>
<p><img src="img/qr-code.png" alt="qr-code"></p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>引用组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"js/jquery-1.9.1.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;!-- 重力感应 --&gt;</div><div class="line">&lt;script src="js/orienter.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;!-- 配置 --&gt;</div><div class="line">&lt;script src="js/gravityScroll.js"&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="JavaScript-初始化"><a href="#JavaScript-初始化" class="headerlink" title="JavaScript 初始化"></a>JavaScript 初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 初始化</div><div class="line">$(&apos;.map&apos;).pos(&#123;</div><div class="line">  // 起始位置</div><div class="line">  &apos;lastPageX&apos;: -100,</div><div class="line">  // 开启循环</div><div class="line">  &apos;loop&apos;: true</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map-box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.map-box</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">2270px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1030px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"../img/bg2.jpg"</span>) no-repeat center; </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[krpano全景笔记]]></title>
      <url>http://ningbo00.top/2017/07/16/nodeKrpano/</url>
      <content type="html"><![CDATA[<h1 id="krpano"><a href="#krpano" class="headerlink" title="krpano"></a>krpano</h1><p>Krpano 可以方便快速的构建全景场景或全景视频(<a href="http://test.go.163.com/go/2015/public/team/ningbo/krpano/comn01/" target="_blank" rel="external">demo</a>)</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#krpano-droplet">Krpano Droplet</a><ul>
<li><a href="#make-pano-normal">MAKE PANO (NORMAL)</a></li>
<li><a href="#make-pano-multires">MAKE PANO (MULTIRES)</a></li>
<li><a href="#make-pano-singleswf">MAKE PANO (SINGLESWF)</a></li>
<li><a href="#make-pano-flat">MAKE PANO (FLAT)</a></li>
<li><a href="#make-vtour-normal">MAKE VTOUR (NORMAL)</a></li>
<li><a href="#make-vtour-multires">MAKE VTOUR (MULTIRES)</a></li>
<li><a href="#make-object">MAKE OBJECT</a></li>
<li><a href="#convert-sphere-to-cube">Convert SPHERE to CUBE</a></li>
<li><a href="#convert-cube-to-sphere">Convert CUBE to SPHERE</a></li>
<li><a href="#encrypt-xml">Encrypt XML</a></li>
</ul>
</li>
<li><a href="#vtour-文件夹说明">vtour 文件夹说明</a><ul>
<li><a href="#vtour-文件夹结构">vtour 文件夹结构</a></li>
<li><a href="#vtour-运作机制">vtour 运作机制</a></li>
</ul>
</li>
<li><a href="#krpano-xml结构">krpano XML结构</a><ul>
<li><a href="#krpano-内置元素说明">Krpano 内置元素说明</a></li>
</ul>
</li>
<li><a href="#常用设置">常用设置</a><ul>
<li><a href="#小行星开场">小行星开场</a></li>
<li><a href="#加载动画">加载动画</a></li>
<li><a href="#修改右键菜单">修改右键菜单</a></li>
<li><a href="#自定义热点">自定义热点</a></li>
<li><a href="#隐藏皮肤">隐藏皮肤</a></li>
<li><a href="#动态热点">添加动态热点</a></li>
<li><a href="#动态热点添加始终显示的文字">动态热点添加始终显示的文字</a></li>
<li><a href="#热点和或图层在鼠标点击或鼠标悬停时进入动态模式">热点和或图层在鼠标点击或鼠标悬停时进入动态模式</a></li>
<li><a href="#拖拽热点">拖拽热点</a></li>
<li><a href="#添加简单的全景视频">添加简单的全景视频</a></li>
<li><a href="#添加雨雪特效">添加雨雪特效</a></li>
<li><a href="#自动旋转">自动旋转</a></li>
<li><a href="#无按钮控制的自动旋转">无按钮控制的自动旋转</a></li>
<li><a href="#按钮控制的自动旋转">按钮控制的自动旋转</a></li>
<li><a href="#添加陀螺仪">添加陀螺仪</a></li>
<li><a href="#场景过渡效果">场景过渡效果</a></li>
<li><a href="#隐藏显示热点">隐藏显示热点</a></li>
<li><a href="#获取全景视频进度">获取全景视频进度</a></li>
</ul>
</li>
</ul>
<hr>
<p>原文链接：<br><a href="https://krpano.milly.me/" target="_blank" rel="external">https://krpano.milly.me/</a><br><a href="http://www.krpano360.com/" target="_blank" rel="external">http://www.krpano360.com/</a></p>
<p>GitHub: <a href="https://github.com/NalvyBoo/nodeKrpano/" target="_blank" rel="external">nodeKrpano</a></p>
<h2 id="Krpano-Droplet"><a href="#Krpano-Droplet" class="headerlink" title="Krpano Droplet"></a>Krpano Droplet</h2><h3 id="MAKE-PANO-NORMAL"><a href="#MAKE-PANO-NORMAL" class="headerlink" title="MAKE PANO (NORMAL)"></a>MAKE PANO (NORMAL)</h3><p><strong>用法说明</strong></p>
<ul>
<li>生成普通 (=单分辨率) 全景</li>
<li>制作典型的 360 度全景</li>
<li>全部全景图将会一次性载入. 默认下方块最大变长为 2048 像素(可以在配置文件中修改)</li>
<li>包括默认的导航皮肤</li>
<li>支持 <code>Flash</code> 和 <code>HTML5</code></li>
</ul>
<p><strong>Droplet 说明</strong></p>
<ul>
<li>配置文件: <code>normal.config</code></li>
<li>默认模版/皮肤配置文件: <code>defaultbuttons.skin</code></li>
</ul>
<hr>
<h3 id="MAKE-PANO-MULTIRES"><a href="#MAKE-PANO-MULTIRES" class="headerlink" title="MAKE PANO (MULTIRES)"></a>MAKE PANO (MULTIRES)</h3><p><strong>用法说明</strong></p>
<ul>
<li>生成多分辨率全景</li>
<li>制作所有类型的全景</li>
<li>只有特定的切片在需要时载入 没有尺寸/分辨率限制</li>
<li>包含默认的导航皮肤</li>
<li>支持 <code>Flash</code> 和 <code>HTML5</code></li>
</ul>
<p><strong>Droplet 说明</strong></p>
<p>配置文件: <code>multiresconfig</code><br>默认模版/皮肤配置文件: <code>defaultbuttonsskin</code></p>
<hr>
<h3 id="MAKE-PANO-SINGLESWF"><a href="#MAKE-PANO-SINGLESWF" class="headerlink" title="MAKE PANO (SINGLESWF)"></a>MAKE PANO (SINGLESWF)</h3><p><strong>用法说明</strong></p>
<ul>
<li>生成普通 (=单分辨率) 全景同时将所有文件嵌在一个SWF文件中只输出一个SWF文件和一个HTML文件</li>
<li>制作典型的360度全景</li>
<li>全部全景图将会一次性载入 默认下方块最大变长为2048像素(可以在配置文件中修改)</li>
<li>包含默认的导航皮肤</li>
<li>仅支持 <code>Flash</code></li>
</ul>
<p><strong>Droplet 说明</strong></p>
<p>配置文件: <code>singleswfconfig</code><br>默认模版/皮肤配置文件: <code>defaultbuttonsskin</code></p>
<hr>
<h3 id="MAKE-PANO-FLAT"><a href="#MAKE-PANO-FLAT" class="headerlink" title="MAKE PANO (FLAT)"></a>MAKE PANO (FLAT)</h3><p><strong>用法说明</strong></p>
<ul>
<li>生成平面切片多分辨率图像</li>
<li>制作平面图像 输出时既定为平面图像</li>
<li>只有特定的切片在需要时载入 没有尺寸/分辨率限制</li>
<li>包含有默认导航按钮的皮肤，针对特定的视角</li>
<li>支持 <code>Flash</code> 与 <code>HTML5</code></li>
</ul>
<p><strong>Droplet 说明</strong></p>
<ul>
<li>配置文件: <code>flatconfig</code></li>
<li>默认模版/皮肤配置文件: <code>flatxml / flatskinxml</code></li>
</ul>
<hr>
<h3 id="MAKE-VTOUR-NORMAL"><a href="#MAKE-VTOUR-NORMAL" class="headerlink" title="MAKE VTOUR (NORMAL)"></a>MAKE VTOUR (NORMAL)</h3><p><strong>用法说明</strong></p>
<ul>
<li>生成普通 (=单分辨率) 全景并将它们整合到一个虚拟漫游中</li>
<li>制作典型的 360 度全景</li>
<li>全部全景图将会一次性载入 默认下方块最大变长为 2048 像素(可以在配置文件中修改)</li>
<li>包含一个包括导航按钮、可滚动缩略图以及可选择必应地图以及重力感应插件的默认皮肤</li>
<li>支持 <code>Flash</code> 和 <code>HTML5</code></li>
</ul>
<p><strong>Droplet 说明</strong></p>
<ul>
<li>配置文件: <code>vtour-normalconfig</code></li>
<li>默认模版/皮肤配置文件: <code>vtourskin-thumbnails-bingmaps-gyroskin</code></li>
</ul>
<hr>
<h3 id="MAKE-VTOUR-MULTIRES"><a href="#MAKE-VTOUR-MULTIRES" class="headerlink" title="MAKE VTOUR (MULTIRES)"></a>MAKE VTOUR (MULTIRES)</h3><p><strong>用法说明</strong></p>
<ul>
<li>生成多分辨率全景并将它们整合到一个虚拟漫游中</li>
<li>制作所有类型全景图像</li>
<li>只有特定的切片在需要时载入 没有尺寸/分辨率限制</li>
<li>包含一个包括导航按钮、可滚动缩略图以及可选择必应地图以及重力感应插件的默认皮肤</li>
<li>支持 <code>Flash</code> 和 <code>HTML5</code></li>
</ul>
<p><strong>Droplet 说明</strong></p>
<ul>
<li>配置文件: <code>vtour-multiresconfig</code></li>
<li>默认模版/皮肤配置文件: <code>vtourskin-thumbnails-bingmaps-gyroskin</code></li>
</ul>
<hr>
<h3 id="MAKE-OBJECT"><a href="#MAKE-OBJECT" class="headerlink" title="MAKE OBJECT"></a>MAKE OBJECT</h3><p><strong>用法说明</strong></p>
<ul>
<li>生成若干个平面多分辨率图像并将它们整合到一个可缩放旋转的 360 物体影像中</li>
<li>制作平面图像物体 所有物体图片的尺寸必须一致</li>
<li>只有特定的切片在需要时载入 没有尺寸/分辨率限制</li>
<li>包含一个特定的控制物体的皮肤</li>
<li>仅支持 <code>Flash</code></li>
</ul>
<p><strong>Droplet 说明</strong></p>
<ul>
<li>配置文件: <code>objectconfig</code></li>
<li>默认模版/皮肤配置文件: <code>objectxml / objectskinxml</code></li>
</ul>
<hr>
<h3 id="Convert-SPHERE-to-CUBE"><a href="#Convert-SPHERE-to-CUBE" class="headerlink" title="Convert SPHERE to CUBE"></a>Convert SPHERE to CUBE</h3><p><strong>用法说明</strong></p>
<ul>
<li>将球面图像转换至立方体图</li>
<li>输出的立方体格式、尺寸以及图像尺寸可以在配置文件中修改</li>
</ul>
<p><strong>Droplet 说明</strong></p>
<ul>
<li>配置文件: <code>convertdropletsconfig</code></li>
</ul>
<hr>
<h3 id="Convert-CUBE-to-SPHERE"><a href="#Convert-CUBE-to-SPHERE" class="headerlink" title="Convert CUBE to SPHERE"></a>Convert CUBE to SPHERE</h3><p><strong>用法说明</strong></p>
<ul>
<li>将六张立方体图像转换成一张球面全景图</li>
<li>输出的图像尺寸和格式可以在配置文件中修改</li>
</ul>
<p><strong>Droplet 说明</strong></p>
<ul>
<li>配置文件: <code>convertdropletsconfig</code></li>
</ul>
<hr>
<h3 id="Encrypt-XML"><a href="#Encrypt-XML" class="headerlink" title="Encrypt XML"></a>Encrypt XML</h3><p><strong>用法说明</strong></p>
<ul>
<li>将 <code>xml</code> 文件拖放进 <code>droplet</code> 进行加密</li>
<li>加密过程中 <code>xml</code> 文件会自动被压缩</li>
</ul>
<hr>
<h3 id="自定义-droplet"><a href="#自定义-droplet" class="headerlink" title="自定义 droplet"></a>自定义 droplet</h3><p>如果内置 <code>droplet</code> 不能满足需求或者需要对一些参数进行自定义。只要复制并重命名一个配置文件与皮肤配置文件，然后复制并重命名一个 <code>droplet</code>，修改里面的配置路径即可。</p>
<hr>
<h2 id="vtour-文件夹说明"><a href="#vtour-文件夹说明" class="headerlink" title="vtour 文件夹说明"></a>vtour 文件夹说明</h2><h3 id="vtour-文件夹结构"><a href="#vtour-文件夹结构" class="headerlink" title="vtour 文件夹结构"></a>vtour 文件夹结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vtour/</div><div class="line">| -- panos/             #存放全景切片图片的文件夹</div><div class="line">| -- skin/              #存放皮肤相关文件</div><div class="line">| -- plugins/           #用来存放插件</div><div class="line">| -- tour.swf           #krpano flash viewer</div><div class="line">| -- tour.js            #krpano HTML5 viewer</div><div class="line">| -- tour.xml           #生成全景的相关配置</div><div class="line">| -- tour.html          #用来浏览全景的页面，需要本地服务环境</div><div class="line">| -- tour_editor.html   #添加热点（hotspot）与初始化视角的设置</div></pre></td></tr></table></figure>
<h3 id="vtour-运作机制"><a href="#vtour-运作机制" class="headerlink" title="vtour 运作机制"></a>vtour 运作机制</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pano"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"tour.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">embedpano(&#123;</div><div class="line">    <span class="attr">swf</span>: <span class="string">"tour.swf"</span>, <span class="comment">//有则表示加载flash引擎，如果设置html5:only则不需要该值</span></div><div class="line">    xml: <span class="string">"tour.xml"</span>, <span class="comment">//启动时的配置文件</span></div><div class="line">    target: <span class="string">"pano"</span>, <span class="comment">//要渲染到的目标容器ID</span></div><div class="line">    html5: <span class="string">"only"</span>, <span class="comment">//如果有需要用到flash，可设置为auto</span></div><div class="line">    <span class="comment">//id: "krpanoSWFObject", //默认的krpano对象，每一个viewer对应唯一id，与JS交互时要用到</span></div><div class="line">    mobilescale: <span class="number">1.0</span>, <span class="comment">//移动设备缩放，1表示不缩放，默认0.5</span></div><div class="line">    passQueryParameters: <span class="literal">false</span> <span class="comment">//是否接受URL传参，例如：tour.html?html5=only&amp;startscene=scene2</span></div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="krpano-XML结构"><a href="#krpano-XML结构" class="headerlink" title="krpano XML结构"></a>krpano XML结构</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">krpano</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">preview</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">image</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">area</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">display</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">control</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">cursors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">autorotate</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">layer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hotspot</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">events</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">contextmenu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">network</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">memory</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">security</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textstyle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">lensflareset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">lensflare</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scene</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">krpano</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Krpano-内置元素说明"><a href="#Krpano-内置元素说明" class="headerlink" title="Krpano 内置元素说明"></a>Krpano 内置元素说明</h3><p><strong>01.krpano</strong></p>
<p><code>krpano</code> 元素是 <code>krpano xml</code> 文件的根元素。任何一个 <code>krpano xml</code> 文件内的其它元素都要被 <code>krpano</code> 元素所嵌套。</p>
<p><strong>02.include</strong></p>
<p><code>include</code> 元素可引入其它 <code>xml</code> 文件的内容，例如我们常要用到的 <code>vtourskin.xml</code> 就是使用 <code>include</code> 嵌入到主 <code>xml</code> 中。</p>
<p><strong>03.preview</strong></p>
<p>预览图设置，也就是全景图完全载入之前的模糊图像，但因为体积较小，因此载入速度较快，会在全景图之前先载入，避免黑屏。</p>
<p><strong>04.image</strong></p>
<p>image 元素控制全景图设置，包括全景图类型，渐进分辨率切片显示等。</p>
<p><strong>05.view</strong></p>
<p>view 元素控制全景的视野，例如起始视角、视角限制与缩放等等。当要设置限制视角或设定特定的初始视角时，需要自行设定或使用插件获取代码。</p>
<p><strong>06.area</strong></p>
<p>area 元素控制全景图在浏览器窗口中显示区域大小。</p>
<p><strong>07.display</strong></p>
<p>控制全景图的显示品质。</p>
<p><strong>08.control</strong></p>
<p>设置鼠标、键盘以及触摸设备对全景浏览的控制方式。</p>
<p><strong>09.cursors</strong></p>
<p>设置鼠标光标样式。</p>
<p><strong>10.autorotate</strong></p>
<p>控制自动旋转。</p>
<p><strong>11.plugin</strong></p>
<p>用来调用插件、插入图片或生成容器。</p>
<p><strong>12.layer</strong></p>
<p>与 <code>plugin</code> 作用相同，只是名称不同。</p>
<p><strong>13.hotspot</strong></p>
<p>热点，可在 3D 空间中插入图片，使之随着 3D 空间一同运动，可制作很多特效。</p>
<p><strong>14.style</strong></p>
<p>可以保存其它元素的属性子集。</p>
<p><strong>15.events</strong></p>
<p>可调用各类型事件，例如全景载入的不同阶段以及鼠标触发的不同行为等。</p>
<p><strong>16.action</strong></p>
<p>自定义动态代码。</p>
<p><strong>17.contextmenu</strong></p>
<p>定义右键菜单的内容。</p>
<p><strong>18.network</strong></p>
<p>控制图像的下载、缓存与解码。</p>
<p><strong>19.menory</strong></p>
<p>控制全景图在设备中的存储。</p>
<p><strong>20.security</strong></p>
<p><code>Flashplayer</code> 和 <code>HTML5</code> 相关的安全/跨域设置。</p>
<p><strong>21.lensflareset</strong></p>
<p>镜头眩光的设置（目前只能在 <code>flash</code> 下使用）。</p>
<p><strong>22.lensflare</strong></p>
<p>生成镜头眩光（目前只能在 <code>flash</code> 下使用）。</p>
<p><strong>23.data</strong></p>
<p>可放置任意的数据。</p>
<p><strong>24.scene</strong></p>
<p>可放置任意 <code>krpano</code> 元素。每个 <code>scene</code> 元素只有在被 <code>loadscene</code> 时才会被载入到浏览器进行解析。</p>
<h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><h3 id="小行星开场"><a href="#小行星开场" class="headerlink" title="小行星开场"></a>小行星开场</h3><p>开启小行星，先找到 <code>tour.xml</code> ，然后搜索 <code>littleplanetintro</code> 将其值设置为 <code>true</code> 即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">skin_settings</span></span></div><div class="line">    <span class="attr">...</span></div><div class="line">    <span class="attr">littleplanetintro</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">...</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h3><p>在官方的案例文件夹中找到 <code>loading-progress</code> 这个文件夹，将需要的文件内容复制到项目中的 <code>skin</code> 文件夹，然后在 <code>tour.xml</code> 文件中引入该文件即可，这样重新打开就可以看到有动态的进度条了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">url</span>=<span class="string">"skin/loadingbar.xml"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="修改右键菜单"><a href="#修改右键菜单" class="headerlink" title="修改右键菜单"></a>修改右键菜单</h3><p>找到引入的皮肤文件，默认在 <code>vtourskin.xml</code> ，然后修改下面这些地方即可自定义右键菜单，但像版权、全屏菜单即使删除也会存在。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">contextmenu</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"fv"</span> <span class="attr">caption</span>=<span class="string">"鱼眼视图"</span> <span class="attr">onclick</span>=<span class="string">"skin_view_fisheye();"</span> <span class="attr">showif</span>=<span class="string">"view.vlookatrange == 180"</span> <span class="attr">devices</span>=<span class="string">"flash|webgl"</span> <span class="attr">separator</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">contextmenu</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>contextmenu元素</strong></p>
<ul>
<li><code>caption</code> 右键菜单显示的文字</li>
<li><code>onclick</code> 控制点击后执行的动作，动作由 <code>action</code> 定义</li>
<li><code>showif</code> 显示条目的条件</li>
<li><code>devices</code> 控制在 <code>flash/webgl</code> 哪个模式中出现</li>
<li><code>separator</code> 显示分隔符来分隔菜单</li>
</ul>
<h3 id="自定义热点"><a href="#自定义热点" class="headerlink" title="自定义热点"></a>自定义热点</h3><p>配置 <code>&lt;hotspot&gt;</code> 中 <code>style</code> 的属性对应的元素（<code>skin</code>对应的文件夹）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hotspot</span> <span class="attr">name</span>=<span class="string">"spot1"</span> <span class="attr">style</span>=<span class="string">"skin_hotspotstyle"</span> <span class="attr">ath</span>=<span class="string">"93.531"</span> <span class="attr">atv</span>=<span class="string">"-1.109"</span> <span class="attr">linkedscene</span>=<span class="string">"scene_shuilifang"</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- skin_hotspotstyle - style for the hotspots --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"skin_hotspotstyle"</span> <span class="attr">url</span>=<span class="string">"vtourskin_hotspot.png"</span> <span class="attr">scale</span>=<span class="string">"0.5"</span> <span class="attr">edge</span>=<span class="string">"top"</span> <span class="attr">distorted</span>=<span class="string">"true"</span></span></div><div class="line">	       <span class="attr">tooltip</span>=<span class="string">""</span></div><div class="line">	       <span class="attr">linkedscene</span>=<span class="string">""</span></div><div class="line">	       <span class="attr">linkedscene_lookat</span>=<span class="string">""</span></div><div class="line">	       <span class="attr">onclick</span>=<span class="string">"skin_hotspotstyle_click();"</span></div><div class="line">	       <span class="attr">onover</span>=<span class="string">"tween(scale,0.55);"</span></div><div class="line">	       <span class="attr">onout</span>=<span class="string">"tween(scale,0.5);"</span></div><div class="line">	       <span class="attr">onloaded</span>=<span class="string">"if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"</span></div><div class="line">	       /&gt;<span class="undefined"></span></div></pre></td></tr></table></figure>
<h3 id="隐藏皮肤"><a href="#隐藏皮肤" class="headerlink" title="隐藏皮肤"></a>隐藏皮肤</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"startup"</span> <span class="attr">autorun</span>=<span class="string">"onstart"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--添加代码 隐藏皮肤 --&gt;</span></div><div class="line">	set(events[skin_events].name, null);</div><div class="line">  	for(set(i,0), i LT layer.count, inc(i), </div><div class="line">	copy(layername, layer[get(i)].name);</div><div class="line">	subtxt(namestart, get(layername), 0, 5);</div><div class="line">	if(namestart == 'skin_', removelayer(get(layername)); dec(i); );</div><div class="line">  );</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="动态热点"><a href="#动态热点" class="headerlink" title="动态热点"></a>动态热点</h3><p>在 <code>tour.xml</code> 空白处的scene标签的外面，添加动作代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"do_crop_animation"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 为热点注册属性 --&gt;</span></div><div class="line">	registerattribute(xframes, calc((imagewidth / %1) BOR 0));</div><div class="line">	registerattribute(yframes, calc((imageheight / %2) BOR 0));</div><div class="line">	registerattribute(frames, calc(xframes * yframes));</div><div class="line">	registerattribute(frame, 0);</div><div class="line"> </div><div class="line">	set(crop, '0|0|%1|%2');</div><div class="line"> </div><div class="line">	setinterval(calc('crop_anim_' + name), calc(1.0 / %3),</div><div class="line">		if(loaded,</div><div class="line">			inc(frame);</div><div class="line">			if(frame GE frames, if(onlastframe !== null, onlastframe() ); set(frame,0); );</div><div class="line">			mod(xpos, frame, xframes);</div><div class="line">			div(ypos, frame, xframes);</div><div class="line">			Math.floor(ypos);</div><div class="line">			mul(xpos, %1);</div><div class="line">			mul(ypos, %2);</div><div class="line">			calc(crop, xpos + '|' + ypos + '|%1|%2');</div><div class="line">		  ,</div><div class="line">			clearinterval(calc('crop_anim_' + name));</div><div class="line">		  );</div><div class="line">	  );</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 <code>hotspot</code> 或 <code>layer</code> 的代码添加代码， <code>do_crop_animation(每帧宽,每帧高,fps)</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url="explosion.png"  onloaded="do_crop_animation(100,100, 60)"</div></pre></td></tr></table></figure>
<h3 id="动态热点添加始终显示的文字"><a href="#动态热点添加始终显示的文字" class="headerlink" title="动态热点添加始终显示的文字"></a>动态热点添加始终显示的文字</h3><p>显示 <code>&lt;scene&gt; title</code> 中的文字</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hotspot</span> <span class="attr">name</span>=<span class="string">"spot1"</span> <span class="attr">url</span>=<span class="string">"animatedhotspot_white.png"</span> <span class="attr">onloaded</span>=<span class="string">"do_crop_animation(64,64, 60);"</span>   <span class="attr">ath</span>=<span class="string">"-15"</span> <span class="attr">atv</span>=<span class="string">"-12"</span> <span class="attr">onclick</span>=<span class="string">"loadscene(get(linkedscene))"</span> <span class="attr">linkedscene</span>=<span class="string">"scene_01"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>或者在 <code>&lt;hotpsot&gt; text</code> 中添加显示自定义的文字</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hotspot</span> <span class="attr">name</span>=<span class="string">"spot1"</span> <span class="attr">url</span>=<span class="string">"animatedhotspot_white.png"</span> <span class="attr">onloaded</span>=<span class="string">"do_crop_animation(64,64, 60);"</span>   <span class="attr">ath</span>=<span class="string">"-15"</span> <span class="attr">atv</span>=<span class="string">"-12"</span> <span class="attr">onclick</span>=<span class="string">"loadscene(get(linkedscene))"</span> <span class="attr">text</span>=<span class="string">"自定义文字"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>在热点的 <code>onload</code> 事件中加上 <code>add_all_the_time_tooltip()</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onloaded="do_crop_animation(64,64, 60);add_all_the_time_tooltip()"</div></pre></td></tr></table></figure>
<p>空白处加上 <code>action</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"add_all_the_time_tooltip"</span>&gt;</span></div><div class="line">	    txtadd(tooltipname, 'tooltip_', get(name));</div><div class="line">	    addplugin(get(tooltipname));</div><div class="line">	    txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');</div><div class="line">	    set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');</div><div class="line">	    set(plugin[get(tooltipname)].align,top);</div><div class="line">	    set(plugin[get(tooltipname)].edge,bottom);</div><div class="line">	    set(plugin[get(tooltipname)].x,0);</div><div class="line">	    set(plugin[get(tooltipname)].y,0);</div><div class="line">	    set(plugin[get(tooltipname)].autowidth,true);</div><div class="line">	    set(plugin[get(tooltipname)].autoheight,true);</div><div class="line">	    set(plugin[get(tooltipname)].vcenter,true);</div><div class="line">	    set(plugin[get(tooltipname)].background,true);</div><div class="line">	    set(plugin[get(tooltipname)].backgroundcolor,0x000000);</div><div class="line">	    set(plugin[get(tooltipname)].roundedge,5);</div><div class="line">	    set(plugin[get(tooltipname)].backgroundalpha,0.65);</div><div class="line">	    set(plugin[get(tooltipname)].padding,5);</div><div class="line">	    set(plugin[get(tooltipname)].border,false);</div><div class="line">	    set(plugin[get(tooltipname)].glow,0);</div><div class="line">	    set(plugin[get(tooltipname)].glowcolor,0xFFFFFF);</div><div class="line">	    set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:MicrosoftYahei;  font-size:24px;');</div><div class="line">	    if(device.mobile,set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:MicrosoftYahei; font-weight:bold; font-size:24px;');</div><div class="line">	    	);</div><div class="line">	    set(plugin[get(tooltipname)].textshadow,0);</div><div class="line">	    set(plugin[get(tooltipname)].textshadowrange,6.0);</div><div class="line">	    set(plugin[get(tooltipname)].textshadowangle,90);</div><div class="line">	    if(text == '' OR text === null,</div><div class="line">	    copy(plugin[get(tooltipname)].html,scene[get(linkedscene)].title),</div><div class="line">	    copy(plugin[get(tooltipname)].html,text)</div><div class="line">	    );    </div><div class="line">	    set(plugin[get(tooltipname)].enabled,false);	</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="热点和或图层在鼠标点击或鼠标悬停时进入动态模式"><a href="#热点和或图层在鼠标点击或鼠标悬停时进入动态模式" class="headerlink" title="热点和或图层在鼠标点击或鼠标悬停时进入动态模式"></a>热点和或图层在鼠标点击或鼠标悬停时进入动态模式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"do_crop_animation_onclick"</span>&gt;</span>	</div><div class="line">		if(hotspot[get(name)].animated === null OR hotspot[get(name)].animated == false,</div><div class="line">		    set(hotspot[get(name)].animated,true);</div><div class="line">			setinterval(calc('crop_anim_' + name), calc(1.0 / %3),			</div><div class="line">					inc(frame);</div><div class="line">					if(frame GE frames, if(onlastframe !== null, onlastframe() ); set(frame,0); );</div><div class="line">					mod(xpos, frame, xframes);</div><div class="line">					div(ypos, frame, xframes);</div><div class="line">					Math.floor(ypos);</div><div class="line">					mul(xpos, %1);</div><div class="line">					mul(ypos, %2);</div><div class="line">					calc(crop, xpos + '|' + ypos + '|%1|%2');			  				</div><div class="line">			  );</div><div class="line">			  ,</div><div class="line">            set(hotspot[get(name)].animated,false);  </div><div class="line">			clearinterval(calc('crop_anim_' + name));</div><div class="line">			set(crop, '0|0|%1|%2');	</div><div class="line">		  );</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"do_crop_animation_register"</span>&gt;</span></div><div class="line">		registerattribute(xframes, calc((imagewidth / %1) BOR 0));</div><div class="line">		registerattribute(yframes, calc((imageheight / %2) BOR 0));</div><div class="line">		registerattribute(frames, calc(xframes * yframes));</div><div class="line">		registerattribute(frame, 0);</div><div class="line">		set(crop, '0|0|%1|%2');	</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- example hotspots --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hotspot</span> <span class="attr">name</span>=<span class="string">"spot1"</span> <span class="attr">url</span>=<span class="string">"animatedhotspot_white.png"</span> </span></div><div class="line">		<span class="attr">onover</span>=<span class="string">"do_crop_animation_onclick(64,64,60)"</span> <span class="attr">onout</span>=<span class="string">"do_crop_animation_onclick(64,64,60)"</span>   <span class="attr">ath</span>=<span class="string">"-15"</span> <span class="attr">atv</span>=<span class="string">"-12"</span> <span class="attr">onloaded</span>=<span class="string">"do_crop_animation_register(64,64)"</span> /&gt;</div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">hotspot</span> <span class="attr">name</span>=<span class="string">"spot1"</span> <span class="attr">url</span>=<span class="string">"animatedhotspot_white.png"</span> </span></div><div class="line">		<span class="attr">onclick</span>=<span class="string">"do_crop_animation_onclick(64,64,60)"</span>  <span class="attr">ath</span>=<span class="string">"-15"</span> <span class="attr">atv</span>=<span class="string">"-12"</span> <span class="attr">onloaded</span>=<span class="string">"do_crop_animation_register(64,64)"</span> /&gt;</div></pre></td></tr></table></figure>
<p>以上代码执行了一次动态循环后，序列图停留在第一帧，如果只是需要执行一次动态循环，并且序列图停留在最后一帧的话，那么 <code>do_crop_animation_onclick</code> 需更改（区别就是 <code>frame</code> 这个变量没有重置为 0 ，并且没有重新设置 <code>crop</code> ）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"do_crop_animation_onclick"</span>&gt;</span> </div><div class="line">    if(hotspot[get(name)].animated === null OR hotspot[get(name)].animated == false,</div><div class="line">        set(hotspot[get(name)].animated,true);</div><div class="line">      setinterval(calc('crop_anim_' + name), calc(1.0 / %3),  </div><div class="line"> </div><div class="line">          inc(frame);</div><div class="line">          if(frame GE frames, if(onlastframe !== null, onlastframe() ); add(frame,frames,-1); );</div><div class="line">          mod(xpos, frame, xframes);</div><div class="line">          div(ypos, frame, xframes);</div><div class="line">          Math.floor(ypos);</div><div class="line">          mul(xpos, %1);</div><div class="line">          mul(ypos, %2);</div><div class="line">          calc(crop, xpos + '|' + ypos + '|%1|%2');               </div><div class="line">        );</div><div class="line">        ,</div><div class="line">        set(hotspot[get(name)].animated,false);  </div><div class="line">      clearinterval(calc('crop_anim_' + name));</div><div class="line">     </div><div class="line">      );</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="拖拽热点"><a href="#拖拽热点" class="headerlink" title="拖拽热点"></a>拖拽热点</h3><p>在 <code>&lt;hotspot/&gt;</code> 中添加代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ondown="draghotspot();"</div></pre></td></tr></table></figure>
<p>添加 action 代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"draghotspot"</span>&gt;</span></div><div class="line">	spheretoscreen(ath, atv, hotspotcenterx, hotspotcentery, 'l');</div><div class="line">	sub(drag_adjustx, mouse.stagex, hotspotcenterx);</div><div class="line">	sub(drag_adjusty, mouse.stagey, hotspotcentery);</div><div class="line">	asyncloop(pressed,</div><div class="line">		sub(dx, mouse.stagex, drag_adjustx);</div><div class="line">		sub(dy, mouse.stagey, drag_adjusty);</div><div class="line">		screentosphere(dx, dy, ath, atv);</div><div class="line">	  );</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="添加简单的全景视频"><a href="#添加简单的全景视频" class="headerlink" title="添加简单的全景视频"></a>添加简单的全景视频</h3><p>从 <code>viewer/examples/videopano</code> 中复制 <code>vtourskin.xml</code>，在主xml 添加代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">scene</span> <span class="attr">name</span>=<span class="string">"videopano"</span> <span class="attr">title</span>=<span class="string">"户外全景视频"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- include the videoplayer interface / skin (with VR support) --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">include</span> <span class="attr">url</span>=<span class="string">"skin/videointerface.xml"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- include the videoplayer plugin --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"video"</span></span></div><div class="line">	        <span class="attr">url.html5</span>=<span class="string">"%SWFPATH%/plugins/videoplayer.js"</span></div><div class="line">	        <span class="attr">url.flash</span>=<span class="string">"%SWFPATH%/plugins/videoplayer.swf"</span></div><div class="line">	        <span class="attr">pausedonstart</span>=<span class="string">"true"</span></div><div class="line">	        <span class="attr">loop</span>=<span class="string">"true"</span></div><div class="line">	        <span class="attr">volume</span>=<span class="string">"1.0"</span></div><div class="line">	        <span class="attr">onloaded</span>=<span class="string">"add_video_sources();"</span></div><div class="line">	        /&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- use the videoplayer plugin as panoramic image source --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">image</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sphere</span> <span class="attr">url</span>=<span class="string">"plugin:video"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- set the default view --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">view</span> <span class="attr">hlookat</span>=<span class="string">"0"</span> <span class="attr">vlookat</span>=<span class="string">"0"</span> <span class="attr">fovtype</span>=<span class="string">"DFOV"</span> <span class="attr">fov</span>=<span class="string">"130"</span> <span class="attr">fovmin</span>=<span class="string">"75"</span> <span class="attr">fovmax</span>=<span class="string">"150"</span> <span class="attr">distortion</span>=<span class="string">"0.0"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- add the video sources and play the video --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"add_video_sources"</span>&gt;</span></div><div class="line">		videointerface_addsource('1024x512', '%CURRENTXML%/video/video-1024x512.mp4|%CURRENTXML%/video/video-1024x512.webm|%CURRENTXML%/video/iphone-audio.m4a', '%CURRENTXML%/video/video-1024x512-poster.jpg');</div><div class="line">		videointerface_addsource('1920x960', '%CURRENTXML%/video/video-1920x960.mp4|%CURRENTXML%/video/video-1920x960.webm|%CURRENTXML%/video/iphone-audio.m4a', '%CURRENTXML%/video/video-1920x960-poster.jpg');</div><div class="line">		</div><div class="line">		if(device.ios,</div><div class="line">			<span class="comment">&lt;!-- iOS Safari has a very slow 'video-to-webgl-texture' transfer, therefore use a low-res video by default --&gt;</span></div><div class="line">			videointerface_play('1024x512');</div><div class="line">		  ,</div><div class="line">			videointerface_play('1920x960');</div><div class="line">		  );</div><div class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">scene</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="添加雨雪特效"><a href="#添加雨雪特效" class="headerlink" title="添加雨雪特效"></a>添加雨雪特效</h3><ol>
<li><p>添加文件 <a href="http://pan.baidu.com/s/1gfLTx6N" target="_blank" rel="external">http://pan.baidu.com/s/1gfLTx6N</a> 密码：6shh  </p>
</li>
<li><p>在 <code>viewer\plugins</code> 拷贝 <code>snow.swf</code> 和 <code>snow.js</code>  </p>
</li>
<li><p>添加  <code>&lt;scene onstart=&quot;snowballs();&quot;&gt;</code>  </p>
<p> 目前可选的特效</p>
<ul>
<li>默认雪 <code>onstart=&#39;defaultsnow();&#39;</code></li>
<li>雪球 <code>onstart=&#39;snowball();&#39;</code></li>
<li>雪花 <code>onstart=&#39;snowflakes();&#39;</code></li>
<li>银色星星 <code>onstart=&#39;silverstars();&#39;</code></li>
<li>金色星星 <code>onstart=&#39;goldenstars();&#39;</code></li>
<li>心形 <code>onstart=&#39;hearts();&#39;</code></li>
<li>笑脸 <code>onstart=&#39;smileys();&#39;</code></li>
<li>钱 <code>onstart=&#39;money();&#39;</code></li>
<li>雨 <code>onstart=&#39;rain();&#39;</code></li>
<li>大雨 <code>onstart=&#39;heavyrain();&#39;</code></li>
</ul>
</li>
<li><p>在 <code>&lt;scene&gt;</code> 添加代码</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">url</span>=<span class="string">"snow.xml"</span> /&gt;</span></div><div class="line">``` </div><div class="line"></div><div class="line">### 自动旋转</div><div class="line"></div><div class="line">添加代码</div><div class="line"></div><div class="line">```xml</div><div class="line"><span class="tag">&lt;<span class="name">autorotate</span> <span class="attr">enabled</span>=<span class="string">"true"</span></span></div><div class="line"><span class="attr">waittime</span>=<span class="string">"5.0"</span></div><div class="line"><span class="attr">speed</span>=<span class="string">"-3.0"</span></div><div class="line"><span class="attr">horizon</span>=<span class="string">"0.0"</span></div><div class="line"><span class="attr">tofov</span>=<span class="string">"120.0"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>waittime</code> 代表在最近一次用户交互行为之后要开始自动旋转之前的等待时间。以秒为单位。  </li>
<li><code>speed</code> 为旋转速度。当该数值为正值时向右旋转，为负值时向左旋转。</li>
<li><code>horizon</code> 为场景在自动旋转时将达到的水平位置。</li>
<li><code>tofov</code> 为旋转中要达到的视场角。</li>
</ul>
<h3 id="无按钮控制的自动旋转"><a href="#无按钮控制的自动旋转" class="headerlink" title="无按钮控制的自动旋转"></a>无按钮控制的自动旋转</h3><p>自动旋转场景，场景旋转一圈后自动进入下一个场景，最后一个场景浏览结束后，进入第一个场景。需添加如下代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">autorotate</span> <span class="attr">enabled</span>=<span class="string">"true"</span></span></div><div class="line"><span class="attr">waittime</span>=<span class="string">"5.0"</span></div><div class="line"><span class="attr">speed</span>=<span class="string">"-3.0"</span></div><div class="line"><span class="attr">horizon</span>=<span class="string">"0.0"</span></div><div class="line"><span class="attr">tofov</span>=<span class="string">"120.0"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>修改 <code>&lt;action name=&quot;startup/&gt;</code> 中的代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"startup"</span>&gt;</span></div><div class="line">if(startscene === null, copy(startscene,scene[0].name));</div><div class="line">loadscene(get(startscene), null, MERGE);</div><div class="line">if(autorotate.enabled,bombtimer(0));</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 <code>xml</code> 文件中加入下面的代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">events</span> <span class="attr">onmousedown</span>=<span class="string">"set(bt,0);"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"bombtimer"</span>&gt;</span></div><div class="line">set(autorotate.enabled,true);</div><div class="line">set(bt,%1);</div><div class="line">add(bt,1);</div><div class="line">delayedcall(1, bombtimer(get(bt)));</div><div class="line">copy(bt_1,autorotate.speed);</div><div class="line">Math.abs(bt_1);</div><div class="line">div(bt_2,360,bt_1);</div><div class="line">add(bt_2,autorotate.waittime);</div><div class="line">if(bt GE bt_2, set(bt,0); nextscene(););</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"nextscene"</span>&gt;</span></div><div class="line">set(ns, get(scene[get(xml.scene)].index));</div><div class="line">set(maxs, get(scene.count));</div><div class="line">add(ns,1);</div><div class="line">if(ns == maxs, set(ns,0));</div><div class="line">loadscene(get(scene[get(ns)].name), null, MERGE, BLEND(1.5));</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="按钮控制的自动旋转"><a href="#按钮控制的自动旋转" class="headerlink" title="按钮控制的自动旋转"></a>按钮控制的自动旋转</h3><p>添加代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">autorotate</span> <span class="attr">enabled</span>=<span class="string">"true"</span></span></div><div class="line"><span class="attr">waittime</span>=<span class="string">"5.0"</span></div><div class="line"><span class="attr">speed</span>=<span class="string">"-3.0"</span></div><div class="line"><span class="attr">horizon</span>=<span class="string">"0.0"</span></div><div class="line"><span class="attr">tofov</span>=<span class="string">"120.0"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>在对应的按钮，通常为 <code>&lt;layer&gt;</code> 标签中找到 <code>onclick</code> 属性替换，如果没有则直接添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layer</span> <span class="attr">...</span> <span class="attr">onclick</span>=<span class="string">"switch(autorotate.enabled);"</span> <span class="attr">...</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="添加陀螺仪"><a href="#添加陀螺仪" class="headerlink" title="添加陀螺仪"></a>添加陀螺仪</h3><p>加载插件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"gyro"</span> <span class="attr">devices</span>=<span class="string">"html5"</span></span></div><div class="line">	        <span class="attr">url</span>=<span class="string">"%SWFPATH%/plugins/gyro2.js"</span></div><div class="line">	        <span class="attr">enabled</span>=<span class="string">"false"</span></div><div class="line">                <span class="attr">onavailable</span>=<span class="string">"gyro_available_info();"</span></div><div class="line">	        /&gt;</div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"gyro_available_info"</span>&gt;</span></div><div class="line">		set(layer[gyrobutton].visible, true);</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<p>控制按钮</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layer</span> <span class="attr">name</span>=<span class="string">"gyrobutton"</span> <span class="attr">url</span>=<span class="string">"gyroicon.png"</span> <span class="attr">scale</span>=<span class="string">"0.5"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">visible</span>=<span class="string">"false"</span> </span></div><div class="line">		       <span class="attr">onclick</span>=<span class="string">"switch(plugin[gyro].enabled);"</span></div><div class="line">		       /&gt;</div></pre></td></tr></table></figure>
<p>默认皮肤开启陀螺仪功能（在 <code>tour.xml</code> 的 <code>skin_settings</code>中设置）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gyro=&quot;true&quot;</div></pre></td></tr></table></figure>
<p>在 <code>tour.xml</code> 的 <code>include</code> 的下一行添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"skin_gyro"</span> </span></div><div class="line">		<span class="attr">enabled</span>=<span class="string">"true"</span></div><div class="line">		<span class="attr">camroll</span>=<span class="string">"false"</span></div><div class="line">   		<span class="attr">onenable</span>=<span class="string">"set(view.limitview, range);"</span></div><div class="line">		/&gt;</div></pre></td></tr></table></figure>
<h3 id="场景过渡效果"><a href="#场景过渡效果" class="headerlink" title="场景过渡效果"></a>场景过渡效果</h3><p>修改全部过渡效果，只需修改 <code>&lt;skin_settings /&gt;</code>中以下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">loadscene_blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)"</div><div class="line">loadscene_blend_prev="SLIDEBLEND(0.5, 180, 0.75, linear)"</div><div class="line">loadscene_blend_next="SLIDEBLEND(0.5,   0, 0.75, linear)"</div></pre></td></tr></table></figure>
<p>如果想为某个特殊的 <code>loadscene</code> 动作加上不一样的过渡效果，在主 <code>xml</code> 的 <code>scene</code> 外加入以下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"no blending"</span>       <span class="attr">description</span>=<span class="string">"无过渡效果"</span>  <span class="attr">blend</span>=<span class="string">"NOBLEND"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"simple crossblending"</span> <span class="attr">description</span>=<span class="string">"简单淡入淡出"</span> <span class="attr">blend</span>=<span class="string">"BLEND(1.0, easeInCubic)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"zoom blend"</span>        <span class="attr">description</span>=<span class="string">"缩放过渡"</span>  <span class="attr">blend</span>=<span class="string">"ZOOMBLEND(2.0, 2.0, easeInOutSine)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"black-out"</span>         <span class="attr">description</span>=<span class="string">"黑场过渡"</span>  <span class="attr">blend</span>=<span class="string">"COLORBLEND(2.0, 0x000000, easeOutSine)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"white-flash"</span>       <span class="attr">description</span>=<span class="string">"白场过渡"</span>  <span class="attr">blend</span>=<span class="string">"LIGHTBLEND(1.0, 0xFFFFFF, 2.0, linear)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"right-to-left"</span>     <span class="attr">description</span>=<span class="string">"从右至左"</span>  <span class="attr">blend</span>=<span class="string">"SLIDEBLEND(1.0, 0.0, 0.2, linear)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"top-to-bottom"</span>     <span class="attr">description</span>=<span class="string">"从上至下"</span>   <span class="attr">blend</span>=<span class="string">"SLIDEBLEND(1.0, 90.0, 0.01, linear)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"diagonal"</span>          <span class="attr">description</span>=<span class="string">"对角线"</span>     <span class="attr">blend</span>=<span class="string">"SLIDEBLEND(1.0, 135.0, 0.4, linear)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"circle open"</span>       <span class="attr">description</span>=<span class="string">"圆形展开"</span>      <span class="attr">blend</span>=<span class="string">"OPENBLEND(1.0, 0.0, 0.2, 0.0, linear)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"vertical open"</span>     <span class="attr">description</span>=<span class="string">"垂直展开"</span>     <span class="attr">blend</span>=<span class="string">"OPENBLEND(0.7, 1.0, 0.1, 0.0, linear)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"horizontal open"</span>   <span class="attr">description</span>=<span class="string">"水平展开"</span>    <span class="attr">blend</span>=<span class="string">"OPENBLEND(1.0, -1.0, 0.3, 0.0, linear)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blendmodes</span> <span class="attr">name</span>=<span class="string">"elliptic + zoom"</span>   <span class="attr">description</span>=<span class="string">"椭圆缩放"</span>      <span class="attr">blend</span>=<span class="string">"OPENBLEND(1.0, -0.5, 0.3, 0.8, linear)"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>修改 <code>loadscene(scenename, null, MERGE, get(blendmodes[black-out].blend));</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hotspot</span> <span class="attr">onclick</span>=<span class="string">"loadscene(scene_shuilifang, null, MERGE, get(blendmodes[vertical open].blend));"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="隐藏显示热点"><a href="#隐藏显示热点" class="headerlink" title="隐藏显示热点"></a>隐藏显示热点</h3><p>添加 <code>&lt;action&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hideBox"</span>&gt;</span></div><div class="line">  tween(%1.alpha,0,0.5);</div><div class="line">  wait(1);</div><div class="line">  set(%1.visible,false);</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"showBox"</span>&gt;</span></div><div class="line">  set(%1.alpha,0);</div><div class="line">  set(%1.visible,true);</div><div class="line">  tween(%1.alpha,1,0.5);</div><div class="line">  tween(%1.scale,1,0.5,easeOutBack);</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hotspot</span> <span class="attr">name</span>=<span class="string">"spot1"</span> <span class="attr">style</span>=<span class="string">"skin_hotspotstyle"</span> <span class="attr">ath</span>=<span class="string">"46.131"</span> <span class="attr">atv</span>=<span class="string">"24.389"</span> <span class="attr">visible</span>=<span class="string">"true"</span> <span class="attr">onclick</span>=<span class="string">"spot1Click"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"spot1Click"</span>&gt;</span></div><div class="line">	hideBox(hotspot[spot1]);</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="获取全景视频进度"><a href="#获取全景视频进度" class="headerlink" title="获取全景视频进度"></a>获取全景视频进度</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 获取视频进度 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"get_video_time"</span>&gt;</span></div><div class="line">  setinterval(skin_video_seek_updates0, 0.1, skin_video_updatetime0())</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"skin_video_updatetime0"</span>&gt;</span></div><div class="line">  setStop(4,video_pause_events(););</div><div class="line"><span class="tag">&lt;/<span class="name">action</span> &gt;</span></div><div class="line">		</div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"setStop"</span>&gt;</span></div><div class="line">  copy(t1, plugin[video].time);</div><div class="line">  if(t1 GT %1,%2);</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 视频暂停回调 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"video_pause_events"</span>&gt;</span></div><div class="line">  plugin[video].pause();</div><div class="line">  clearinterval(skin_video_seek_updates0);</div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6-03 变量的解构赋值]]></title>
      <url>http://ningbo00.top/2017/03/16/variate/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/destructuring</a><br>源码地址：<a href="https://github.com/NalvyBoo/nodesES6/tree/master/ES6-03-%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC" target="_blank" rel="external">https://github.com/NalvyBoo/nodesES6</a></p>
<hr>
<h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为<strong>解构</strong>（Destructuring）  </p>
<p>常规赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</div></pre></td></tr></table></figure>
<p>ES6 允许从数组中提取值，按照对应位置，对变量赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [d,e,f] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">let</span> [foo,[[bar],baz]] = [<span class="number">1</span>,[[<span class="number">2</span>],<span class="number">3</span>]];</div><div class="line"><span class="built_in">console</span>.log(foo,bar,baz); <span class="comment">//1 2 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>,<span class="string">"bar"</span>,<span class="string">"baz"</span>];</div><div class="line"><span class="built_in">console</span>.log(third);</div><div class="line"></div><div class="line"><span class="keyword">let</span> [x,,y] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(x,y); <span class="comment">//1 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [head,...tail] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(head,tail); <span class="comment">// 1 [2,3,4]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x0,y0,...z0] = [<span class="string">'a'</span>];</div><div class="line"><span class="built_in">console</span>.log(x0,y0,z0); <span class="comment">//a undefined []</span></div><div class="line"></div><div class="line"><span class="keyword">let</span>[fo] = [];</div><div class="line"><span class="built_in">console</span>.log(fo); <span class="comment">//undefined</span></div><div class="line"></div><div class="line"><span class="keyword">let</span>[ba0,fo0] = [<span class="number">1</span>];</div><div class="line"><span class="built_in">console</span>.log(ba0,fo0); <span class="comment">//1 undefined</span></div></pre></td></tr></table></figure>
<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构），那么将会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</div><div class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</div></pre></td></tr></table></figure>
<p>Set 结构也可以使用数组的解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span>[x1,y1,z1] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]);</div><div class="line"><span class="built_in">console</span>.log(x1); <span class="comment">//a</span></div></pre></td></tr></table></figure>
<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibs</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">let</span> a = <span class="number">0</span>;</div><div class="line">	<span class="keyword">let</span> b = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">		<span class="keyword">yield</span> a;</div><div class="line">		[a,b] = [b, a+b];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> [first,second,third0,fourth,fifth,sixth] = fibs();</div><div class="line"><span class="built_in">console</span>.log(sixth); <span class="comment">//5</span></div></pre></td></tr></table></figure>
<p>默认值：解构赋值允许指定默认值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [foo1 = <span class="literal">true</span>] = [];</div><div class="line"><span class="built_in">console</span>.log(foo1); <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x2,y2 = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; </div><div class="line"><span class="built_in">console</span>.log(x2,y2); <span class="comment">//a,b</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x3,y3 = <span class="string">'d'</span>] = [<span class="string">'c'</span>,<span class="literal">undefined</span>];</div><div class="line"><span class="built_in">console</span>.log(x3,y3); <span class="comment">//c,d</span></div></pre></td></tr></table></figure>
<p>ES6内部使用严格相等运算符（===）来判断一个位置是否有值<br>如果一个数组成员不严格等于 undefined ,默认值是不会生效的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [x4 = <span class="number">4</span>] = [<span class="literal">undefined</span>];</div><div class="line"><span class="built_in">console</span>.log(x4); <span class="comment">//4</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x5 = <span class="number">1</span>] = [<span class="literal">null</span>];</div><div class="line"><span class="built_in">console</span>.log(x5); <span class="comment">//null null不严格等于undefined</span></div></pre></td></tr></table></figure>
<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ff</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> [x6 = ff()] = [<span class="number">6</span>];</div><div class="line"><span class="built_in">console</span>.log(x6); <span class="comment">//6</span></div></pre></td></tr></table></figure>
<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [x7 = <span class="number">7</span>,y7 = x7] = [];</div><div class="line"><span class="built_in">console</span>.log(x7,y7); <span class="comment">//7 7</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x8 = <span class="number">8</span>,y8 = x8] = [<span class="number">8</span>];</div><div class="line"><span class="built_in">console</span>.log(x8,y8); <span class="comment">//8 8</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x9 = y9,y9 = <span class="number">9</span>] = []; <span class="comment">//y9 is not defined</span></div></pre></td></tr></table></figure>
<h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><p>对象的属性没有次序，必须与属性同名，才能取到正确的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; f2, b2 &#125; = &#123; <span class="attr">f2</span>:<span class="string">"aaa"</span>,<span class="attr">b2</span>:<span class="string">"bbb"</span> &#125;;</div><div class="line"><span class="built_in">console</span>.log(f2,b2); <span class="comment">// aaa bbb</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; b3 &#125; = &#123; <span class="attr">f3</span>:<span class="string">"f3"</span>, <span class="attr">b33</span>:<span class="string">"b33"</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(b3); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>如果变量名与属性名不一致，必须写成下面这样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">ofirst</span>:<span class="string">"hello"</span>, <span class="attr">last</span>:<span class="string">"world"</span> &#125;;</div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">ofirst</span>: <span class="keyword">of</span>, <span class="attr">last</span>: l &#125; = obj;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">of</span>,l); <span class="comment">// hello world</span></div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">和数组一样，解构也可以用于嵌套解构的对象</div><div class="line"></div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="keyword">let</span> obj2 = &#123;</div><div class="line">	<span class="attr">p</span>:[</div><div class="line">	<span class="string">'hello'</span>,</div><div class="line">	&#123; <span class="attr">y10</span>: <span class="string">'world'</span>&#125;</div><div class="line">	]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>:[x10, &#123; y10 &#125;] &#125; = obj2;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(x10,y10); <span class="comment">//hello world</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj3 = &#123;&#125;;</div><div class="line"><span class="keyword">let</span> arr = [];</div><div class="line">(&#123; <span class="attr">foo2</span>: obj3.prop, <span class="attr">b4</span>: arr[<span class="number">0</span>] &#125; = &#123; <span class="attr">foo2</span>: <span class="number">123</span>, <span class="attr">b4</span>: <span class="literal">true</span> &#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj3,arr);<span class="comment">//Object &#123;prop: 123&#125; [true]</span></div></pre></td></tr></table></figure>
<p>对象的解构也可以指定默认值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123; <span class="attr">x11</span>: y11 = <span class="number">11</span> &#125; = &#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(y11); <span class="comment">//11</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; <span class="attr">x12</span>: y12 = <span class="number">1</span>&#125; = &#123; <span class="attr">x12</span>: <span class="number">12</span> &#125;;</div><div class="line"><span class="built_in">console</span>.log(y12); <span class="comment">// 12</span></div></pre></td></tr></table></figure>
<p>如果解构失败，变量的值等于 undefined</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; foo3 &#125; = &#123; <span class="attr">bar3</span>: <span class="string">'baz'</span> &#125;;</div><div class="line"><span class="built_in">console</span>.log(foo3); <span class="comment">//undefined</span></div></pre></td></tr></table></figure>
<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将报错</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; <span class="attr">foo4</span>: &#123; bar4 &#125; &#125; = &#123; <span class="attr">bar4</span>: <span class="string">"bar4"</span> &#125;;<span class="comment">// Uncaught TypeError: Cannot match against 'undefined' or 'null'.</span></div></pre></td></tr></table></figure>
<h2 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [aa,bb,cc,dd,ee] = <span class="string">'hello'</span>;</div><div class="line"><span class="built_in">console</span>.log(aa,bb,cc,dd,ee); <span class="comment">//h e l l o</span></div></pre></td></tr></table></figure>
<p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; <span class="attr">length</span>: len &#125; = <span class="string">'hello'</span>;</div><div class="line"><span class="built_in">console</span>.log(len); <span class="comment">//5</span></div></pre></td></tr></table></figure>
<h2 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h2><p>解构赋值是，如果等号右边是数值和布尔值，则会先转为对象<br>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象<br>由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; <span class="attr">toString</span>: s &#125; = <span class="number">123</span>;</div><div class="line"><span class="built_in">console</span>.log(s,s === <span class="built_in">Number</span>.prototype.toString);<span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">toString</span>: s0 &#125; = <span class="literal">true</span>;</div><div class="line"><span class="built_in">console</span>.log(s0,s0 === <span class="built_in">Boolean</span>.prototype.toString);<span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>:x14 &#125; = <span class="literal">undefined</span>; <span class="comment">//TypeError</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>:x15 &#125; = <span class="literal">null</span>; <span class="comment">//TypeError</span></div></pre></td></tr></table></figure>
<h2 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x,y]</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(add([<span class="number">1</span>,<span class="number">2</span>]));<span class="comment">//3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> [x,y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(move(&#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">8</span>&#125;));<span class="comment">// [3,8]</span></div><div class="line"><span class="built_in">console</span>.log(move(&#123;<span class="attr">x</span>:<span class="number">3</span>&#125;));<span class="comment">// [3,0]</span></div><div class="line"><span class="built_in">console</span>.log(move(&#123;&#125;));<span class="comment">// [0,0]</span></div><div class="line"><span class="built_in">console</span>.log(move());<span class="comment">// [0,0]</span></div></pre></td></tr></table></figure>
<h2 id="不能使用圆括号的情况"><a href="#不能使用圆括号的情况" class="headerlink" title="不能使用圆括号的情况"></a>不能使用圆括号的情况</h2><p>变量声明语句中，不能带有圆括号<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Unexpected token (</span></div><div class="line"><span class="keyword">let</span> [(a)] = [<span class="number">1</span>]; </div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">x</span>:(c)&#125; = &#123;&#125;;</div><div class="line"><span class="keyword">let</span> &#123;&#123;<span class="attr">x</span>:c&#125;&#125; = &#123;&#125;;</div><div class="line"><span class="keyword">let</span> &#123;(x:c)&#125; = &#123;&#125;;</div><div class="line"><span class="keyword">let</span> &#123;(x):c&#125; = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">o</span>: (&#123; <span class="attr">p</span>:p &#125;) &#125; = &#123; <span class="attr">o</span>: &#123; <span class="attr">p</span>:<span class="number">2</span> &#125; &#125;;</div></pre></td></tr></table></figure></p>
<p>函数参数中，模式不能带有圆括号<br>函数参数也属于变量声明，因此不能带有圆括号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Unexpected token (</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[(z</span>)]) </span>&#123; <span class="keyword">return</span> z; &#125;</div></pre></td></tr></table></figure>
<p>赋值语句中，不能将整个模式，或嵌套模式中的一层，放在圆括号之中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(&#123; <span class="attr">p</span>:a &#125;) = &#123; <span class="attr">p</span>:<span class="number">42</span> &#125;;</div><div class="line">[(&#123; <span class="attr">p</span>:a &#125;),&#123; <span class="attr">x</span>:c &#125;] = [&#123;&#125;,&#123;&#125;];</div><div class="line">[(&#123; <span class="attr">p</span>:a &#125;),&#123; <span class="attr">x</span>:c &#125;] = [&#123;&#125;,&#123;&#125;];</div></pre></td></tr></table></figure>
<p>可以使用圆括号的情况：赋值语句的非模式部分，可以使用圆括号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> b5;</div><div class="line">[(b5)] = [<span class="number">5</span>];</div><div class="line">(&#123; <span class="attr">p</span>: (d) &#125; = &#123;&#125;) ;</div><div class="line">[(<span class="built_in">parseInt</span>.prop)] = [<span class="number">3</span>];</div></pre></td></tr></table></figure>
<h2 id="变量解构赋值的用途"><a href="#变量解构赋值的用途" class="headerlink" title="变量解构赋值的用途"></a>变量解构赋值的用途</h2><p>交换变量的值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x20 = <span class="number">12</span>;</div><div class="line"><span class="keyword">let</span> y20 = <span class="number">20</span>;</div><div class="line"></div><div class="line">[x20,y20] = [y20,x20];</div><div class="line"><span class="built_in">console</span>.log(x20,y20);<span class="comment">// 20 12</span></div></pre></td></tr></table></figure>
<p>从函数返回多个值  </p>
<p>返回一个数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> [a21,b21,c21] = example();</div><div class="line"><span class="built_in">console</span>.log(a21,b21,c21); <span class="comment">// 1 2 3</span></div></pre></td></tr></table></figure>
<p>返回一个对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span>&#123;</div><div class="line">		<span class="attr">foo4</span>: <span class="number">4</span>,</div><div class="line">		<span class="attr">bar5</span>: <span class="number">5</span></div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;foo4,bar5&#125; = example2();</div><div class="line"><span class="built_in">console</span>.log(foo4,bar5); <span class="comment">// 4 5</span></div></pre></td></tr></table></figure>
<p>函数参数的定义：结构函数可以方便的将一组参数与变量名对应起来  </p>
<p>参数是一组有次序的值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fff</span>(<span class="params">[x22,y22,z22]</span>) </span>&#123;&#125;</div><div class="line">fff([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</div></pre></td></tr></table></figure>
<p>参数是一组无次序的值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ffff</span>(<span class="params">&#123;x23,y23,z23&#125;</span>)</span>&#123;&#125;</div><div class="line">ffff(&#123;<span class="attr">z23</span>: <span class="number">3</span>,<span class="attr">y23</span>: <span class="number">2</span>,<span class="attr">z23</span>: <span class="number">1</span>&#125;);</div></pre></td></tr></table></figure>
<p>提取JSON数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> jsonData = &#123;</div><div class="line">	<span class="attr">id</span>: <span class="number">42</span>,</div><div class="line">	<span class="attr">status</span>: <span class="string">"OK"</span>,</div><div class="line">	<span class="attr">data</span>: [<span class="number">867</span>,<span class="number">5309</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; id,status, <span class="attr">data</span>: number &#125; = jsonData;</div><div class="line"><span class="built_in">console</span>.log(id,status,number); <span class="comment">//42 "OK" [867, 5309]</span></div></pre></td></tr></table></figure>
<p>函数参数的默认值  </p>
<p>指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || ‘default foo’;这样的语句</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url,&#123;</span></span></div><div class="line">	async = true,</div><div class="line">  	beforeSend = function () &#123;&#125;,</div><div class="line">  	cache = <span class="literal">true</span>,</div><div class="line">  	complete = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">  	crossDomain = <span class="literal">false</span>,</div><div class="line">  	global = <span class="literal">true</span>,</div><div class="line">  	<span class="comment">// ... more config</span></div><div class="line">&#125;)&#123;</div><div class="line">	<span class="comment">// ... do stuff</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>遍历Map结构  </p>
<p>任何部署了Iterator接口的对象，都可以用for…of循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</div><div class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</div><div class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果只想获取键名，或者只想获取键值，可以写成下面这样  </p>
<p>获取键名</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取键值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输入模块的指定方法<br>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="built_in">require</span>(<span class="string">"source-map"</span>);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6-02 let 和 const 命令]]></title>
      <url>http://ningbo00.top/2017/03/15/es6-let/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a></p>
<h1 id="let-和-const命令"><a href="#let-和-const命令" class="headerlink" title="let 和 const命令"></a>let 和 const命令</h1><h2 id="let基本用法"><a href="#let基本用法" class="headerlink" title="let基本用法"></a>let基本用法</h2><p>用法类似于var,但是所生命的变量，只在let所在的代码块内有效</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">	<span class="built_in">console</span>.log(a); <span class="comment">// 10</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"a:"</span> + a); <span class="comment">// a is not defined</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"b:"</span> + b);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(i); <span class="comment">// i is not defined</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(j); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)&#123;</div><div class="line">	c[k] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(k);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">c[<span class="number">6</span>](); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> l = <span class="number">0</span>; l &lt; <span class="number">10</span>; l++)&#123;</div><div class="line">	d[l] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(l);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">d[<span class="number">6</span>](); <span class="comment">// 6</span></div></pre></td></tr></table></figure>
<h2 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h2><p>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined<br>let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">//undefined</span></div><div class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(bar); <span class="comment">//bar is not defined</span></div><div class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</div></pre></td></tr></table></figure>
<h2 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h2><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响<br>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。<br>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">	tmp = <span class="string">"abc"</span>;</div><div class="line">	<span class="keyword">let</span> tmp; <span class="comment">//tmp is not defined</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">	<span class="comment">// TDZ开始</span></div><div class="line">	tmp = <span class="string">"abc"</span>; <span class="comment">// ReferenceError</span></div><div class="line"></div><div class="line">	<span class="keyword">let</span> tmp; <span class="comment">// underfined</span></div><div class="line">	<span class="built_in">console</span>.log(tmp); <span class="comment">//underfined</span></div><div class="line"></div><div class="line">	tmp = <span class="number">456</span>;</div><div class="line">	<span class="built_in">console</span>.log(tmp); <span class="comment">//456</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(tmp);<span class="comment">//abc</span></div></pre></td></tr></table></figure>
<p>上面代码中，在let命令声明变量tmp之前，都属于变量tmp的“死区”。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> x;</div><div class="line"></div><div class="line"><span class="keyword">let</span> x; <span class="comment">//x is not defined</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> x); <span class="comment">//underfined</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar0</span>(<span class="params">x = y, y = <span class="number">2</span></span>)</span>&#123; <span class="comment">// 死区，报错，提前声明</span></div><div class="line"> 	<span class="keyword">return</span> [x,y];</div><div class="line">&#125;</div><div class="line">bar0();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar1</span>(<span class="params">x = <span class="number">2</span>, y = x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> [x,y];</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(bar1()); <span class="comment">//[2, 2]</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = x;</div><div class="line"><span class="keyword">let</span> x0 = x0; <span class="comment">//x0 is not defined</span></div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">## 不允许重复声明</div><div class="line">let不允许在相同作用域内，重复声明同一个变量</div><div class="line"></div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn0</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line"> 	<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">fn0();<span class="comment">//报错</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">fn1(); <span class="comment">// 报错</span></div></pre></td></tr></table></figure>
<p>不能在函数内部重新声明参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">func(<span class="number">1</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>)</span>&#123;</div><div class="line">	<span class="keyword">let</span> arg; <span class="comment">//报错</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">let</span> arg;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">## 块级作用域</div><div class="line">let实际上为 JavaScript 新增了块级作用域</div><div class="line"></div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(tmp);</div><div class="line">	<span class="keyword">if</span>(<span class="literal">false</span>)&#123;</div><div class="line">		<span class="keyword">var</span> tmp = <span class="string">'hello world'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">f(); <span class="comment">//underfined 变量提升，导致内层的tmp变量覆盖了外层的tmp变量</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">let</span> n = <span class="number">5</span>;</div><div class="line">	<span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">		<span class="keyword">let</span> n = <span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(n); <span class="comment">//5</span></div><div class="line">&#125;</div><div class="line">f1();</div></pre></td></tr></table></figure>
<p>下面代码使用了一个五层的块级作用域。外层作用域无法读取内层作用域的变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;&#123;&#123;</div><div class="line">	&#123;<span class="keyword">let</span> insane = <span class="string">'Hello World'</span>&#125;</div><div class="line">	<span class="comment">// console.log(insane);//insane is not defined</span></div><div class="line">&#125;&#125;&#125;&#125;;</div></pre></td></tr></table></figure>
<p>内层作用域可以定义外层作用域的同名变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;&#123;&#123;</div><div class="line">	<span class="keyword">let</span> insane = <span class="string">"Hello World"</span>;</div><div class="line">	&#123;<span class="keyword">let</span> insane = <span class="string">"Hello World"</span>&#125;</div><div class="line">&#125;&#125;&#125;&#125;;</div></pre></td></tr></table></figure>
<p>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IIFE写法</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> tmp = <span class="number">0</span>;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// 块级作用域写法</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">let</span> tmp = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="块级作用域与函数声明"><a href="#块级作用域与函数声明" class="headerlink" title="块级作用域与函数声明"></a>块级作用域与函数声明</h2><p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。<br>ES6 的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错。<br>本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。<br>现在有一个提案，使得块级作用域可以变为表达式,在块级作用域之前加上do，使它变为do表达式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> z = <span class="keyword">do</span>&#123;</div><div class="line">	<span class="keyword">let</span> t = f();</div><div class="line">	t * t + <span class="number">1</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="const命令-基本用法"><a href="#const命令-基本用法" class="headerlink" title="const命令 基本用法"></a>const命令 基本用法</h2><p>const声明一个只读的常亮。一旦声明，常亮的值就不能更改<br>只声明不赋值，就会报错<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效<br>const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用<br>const声明的常量，也与let一样不可重复声明。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</div><div class="line"><span class="built_in">console</span>.log(PI);</div><div class="line">PI = <span class="number">3</span>;<span class="comment">//Assignment to constant variable.</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> fooo;<span class="comment">// Missing initializer in const declaration</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将对象彻底冻结的函数</span></div><div class="line"><span class="keyword">var</span> constantize = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">Object</span>.freeze(obj);</div><div class="line">    <span class="built_in">Object</span>.keys(obj).forEach( <span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> ( <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ) &#123;</div><div class="line">        	constantize( obj[key] );</div><div class="line">    	&#125;</div><div class="line">  	&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6-01 Babel 配置]]></title>
      <url>http://ningbo00.top/2017/03/15/es6-babel/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a></p>
<h1 id="Babel-配置"><a href="#Babel-配置" class="headerlink" title="Babel 配置"></a>Babel 配置</h1><h2 id="配置文件-babelrc"><a href="#配置文件-babelrc" class="headerlink" title="配置文件 .babelrc"></a>配置文件 <code>.babelrc</code></h2><ul>
<li>使用Bable的第一步，在项目根目录下新建并配置文件 <code>.babelrc</code>  </li>
<li>window 环境下，命名 <code>.babelrc.</code> 生成配置文件</li>
<li>该文件来设置转码规则和插件，基本格式如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;preset&quot;:[],</div><div class="line">	&quot;plugins&quot;:[]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>preset</code> 字段设定转码规则，可以根据需要安装  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># ES2015转码规则</div><div class="line">$ npm install --save-dev babel-preset-es2015</div><div class="line"></div><div class="line"># react转码规则</div><div class="line">$ npm install --save-dev babel-preset-react</div><div class="line"></div><div class="line"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</div><div class="line">$ npm install --save-dev babel-preset-stage-0</div><div class="line">$ npm install --save-dev babel-preset-stage-1</div><div class="line">$ npm install --save-dev babel-preset-stage-2</div><div class="line">$ npm install --save-dev babel-preset-stage-3</div></pre></td></tr></table></figure>
<ul>
<li>将这些规则加入 <code>.babelrc</code>  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [</div><div class="line">      &quot;es2015&quot;,</div><div class="line">      &quot;react&quot;,</div><div class="line">      &quot;stage-2&quot;</div><div class="line">    ],</div><div class="line">    &quot;plugins&quot;: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>以下所有Babel工具和模块的使用，都必须先写好 <code>.babelrc</code></li>
</ul>
<h2 id="全局安装-babel-cli"><a href="#全局安装-babel-cli" class="headerlink" title="全局安装 babel-cli"></a>全局安装 <code>babel-cli</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global babel-cli</div></pre></td></tr></table></figure>
<p>基本用法如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 转码结果输出到标准输出</div><div class="line">$ babel example.js</div><div class="line"></div><div class="line"># 转码结果写入一个文件</div><div class="line"># --out-file 或 -o 参数指定输出文件</div><div class="line">$ babel example.js --out-file compiled.js</div><div class="line"># 或者</div><div class="line">$ babel example.js -o compiled.js</div><div class="line"></div><div class="line"># 整个目录转码</div><div class="line"># --out-dir 或 -d 参数指定输出目录</div><div class="line">$ babel src --out-dir lib</div><div class="line"># 或者</div><div class="line">$ babel src -d lib</div><div class="line"></div><div class="line"># -s 参数生成source map文件</div><div class="line">$ babel src -d lib -s</div></pre></td></tr></table></figure>
<h2 id="项目安装-babel-cli"><a href="#项目安装-babel-cli" class="headerlink" title="项目安装 babel-cli"></a>项目安装 <code>babel-cli</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-cli</div></pre></td></tr></table></figure>
<p>配置 <code>package.json</code> ，将 <code>src文件夹</code> 编译到 <code>js</code> 文件夹</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // ...</div><div class="line">  "devDependencies": &#123;</div><div class="line">    "babel-cli": "^6.24.0"</div><div class="line">  &#125;,</div><div class="line">  "scripts": &#123;</div><div class="line">    "build": "babel src -d js"</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转码执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run build</div></pre></td></tr></table></figure>
<h2 id="babel-bode"><a href="#babel-bode" class="headerlink" title="babel-bode"></a>babel-bode</h2><p>改写 <code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"script-name"</span>: <span class="string">"babel-node script.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，使用 <code>babel-node</code> 替代 <code>node</code> ，这样 <code>script.js</code> 本身就不用做任何转码处理。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cssnext 语法说明]]></title>
      <url>http://ningbo00.top/2017/02/17/cssnext/</url>
      <content type="html"><![CDATA[<h1 id="cssnext-语法说明"><a href="#cssnext-语法说明" class="headerlink" title="cssnext 语法说明"></a>cssnext 语法说明</h1><p>支持书写CSS未来语法的插件，文章整理了支持PostCSS的常用语法</p>
<ul>
<li>自定义属性 &amp; <code>var()</code></li>
<li>自定义属性集 &amp; <code>@apply</code></li>
<li><code>calc()</code> &amp; <code>var()</code></li>
<li>媒体查询 &amp; <code>@custom-media</code></li>
<li>自定义选择器 &amp; <code>@custom-selector</code></li>
<li>嵌套 &amp; <code>&amp;</code></li>
<li>color()</li>
</ul>
<hr>
<h2 id="自定义属性-amp-var"><a href="#自定义属性-amp-var" class="headerlink" title="自定义属性 &amp; var()"></a>自定义属性 &amp; <code>var()</code></h2><p>在 <code>:root{}</code> 中定义常用属性，使用<code>--</code>前缀命名变量<br>使用 <code>var()</code> 调用</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span>&#123;</div><div class="line">	<span class="attribute">--mainColor</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">	<span class="attribute">color</span>: <span class="built_in">var</span>(--mainColor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">	<span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="自定义属性集-amp-apply"><a href="#自定义属性集-amp-apply" class="headerlink" title="自定义属性集 &amp; @apply"></a>自定义属性集 &amp; <code>@apply</code></h2><p>在 <code>:root{}</code> 中定义属性集，使用 <code>--</code> 前缀命名属性集变量名<br>使用 <code>@apply</code> 进行调用<br>在 <code>http://cssnext.io/playground/</code> 在线测试有效</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">:root &#123;</div><div class="line">  --centered: &#123;</div><div class="line">    display: flex;</div><div class="line">    align-items: center;</div><div class="line">    justify-content: center;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.centered &#123;</div><div class="line">  @apply --centered;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.centered</span> &#123;</div><div class="line">  <span class="attribute">display</span>: -webkit-box;</div><div class="line">  <span class="attribute">display</span>: -ms-flexbox;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">-webkit-box-align</span>: center;</div><div class="line">      <span class="attribute">-ms-flex-align</span>: center;</div><div class="line">          <span class="attribute">align-items</span>: center;</div><div class="line">  <span class="attribute">-webkit-box-pack</span>: center;</div><div class="line">      <span class="attribute">-ms-flex-pack</span>: center;</div><div class="line">          <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="calc-amp-var"><a href="#calc-amp-var" class="headerlink" title="calc() &amp; var()"></a><code>calc()</code> &amp; <code>var()</code></h2><p>使自定义属性支持 <code>calc()</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span>&#123;</div><div class="line">	<span class="attribute">--fontSize</span>: <span class="number">1rem</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="built_in">calc</span>(var(--fontSize)*<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="built_in">calc</span>(1rem*2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="媒体查询-amp-custom-media"><a href="#媒体查询-amp-custom-media" class="headerlink" title="媒体查询 &amp; @custom-media"></a>媒体查询 &amp; <code>@custom-media</code></h2><p>支持使用<code>&lt;=</code>,<code>&gt;=</code>;代码在css最后<br><strong>注意：变量名和括号之间保留空格</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">custom</span>-<span class="keyword">media</span> --small-viewport (max-width: <span class="number">30em</span>);</div><div class="line">@<span class="keyword">media</span> (--small-viewport)&#123;</div><div class="line">	<span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">10rem</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">30em</span>)&#123;</div><div class="line">	<span class="selector-tag">body</span>&#123;</div><div class="line">		<span class="attribute">font-size</span>: <span class="number">10rem</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">custom</span>-<span class="keyword">media</span> --viewport-medium (width &lt;= <span class="number">50rem</span>);</div><div class="line">@<span class="keyword">media</span> (--viewport-medium) &#123;</div><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="built_in">calc</span>(var(--fontSize) * <span class="number">1.2</span>); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后样式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@media (max-width: 50rem)&#123;</div><div class="line">	body&#123;</div><div class="line">		font-size: calc(1rem * 1.2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (width &gt;= <span class="number">500px</span>) and (width &lt;= <span class="number">1200px</span>)&#123;</div><div class="line">	<span class="selector-tag">body</span>&#123;</div><div class="line">		<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后结果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">500px</span>) and (max-width: <span class="number">1200px</span>)&#123;</div><div class="line">	<span class="selector-tag">body</span>&#123;</div><div class="line">		<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="自定义选择器-amp-custom-selector"><a href="#自定义选择器-amp-custom-selector" class="headerlink" title="自定义选择器 &amp; @custom-selector"></a>自定义选择器 &amp; <code>@custom-selector</code></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">custom</span>-<span class="keyword">selector</span> :--button button, .button;</div><div class="line">@<span class="keyword">custom</span>-<span class="keyword">selector</span> :--enter :hover, :focus;</div><div class="line">@<span class="keyword">custom</span>-<span class="keyword">selector</span> :--heading h1, h2, h3, h4, h5, h6;</div><div class="line"></div><div class="line"><span class="selector-pseudo">:--button</span>&#123;</div><div class="line">	<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:--enter</span>&#123;</div><div class="line">	<span class="attribute">color</span>: black;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-pseudo">:--heading</span> &#123; </div><div class="line">	<span class="attribute">margin-top</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后样式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">button, .button&#123;</div><div class="line">	box-shadow: 0 0 1px black;</div><div class="line">&#125;</div><div class="line"></div><div class="line">a:hover, a:focus&#123;</div><div class="line">	color: black;</div><div class="line">&#125;</div><div class="line"></div><div class="line">h1, h2, h3, h4, h5, h6 &#123; </div><div class="line">	margin-top: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="嵌套-amp-amp"><a href="#嵌套-amp-amp" class="headerlink" title="嵌套 &amp; &amp;"></a>嵌套 &amp; <code>&amp;</code></h2><p><code>@nest selector &amp;</code> 外层嵌套<br>支持嵌套媒体查询</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">a&#123;</div><div class="line">	&amp; span&#123;</div><div class="line">		color: white;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	@nest span &amp;&#123;</div><div class="line">		color: blue;</div><div class="line">	&#125;</div><div class="line">	/*嵌套@media*/</div><div class="line">	@media (min-width: 30rem)&#123;</div><div class="line">		color: yellow;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span> <span class="selector-tag">span</span>&#123;</div><div class="line">	<span class="attribute">color</span>: white;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">span</span> <span class="selector-tag">a</span>&#123;</div><div class="line">	<span class="attribute">color</span>: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">30em</span>) &#123;</div><div class="line">    <span class="selector-tag">a</span>&#123;</div><div class="line">    	<span class="attribute">color</span>: yellow</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="color"><a href="#color" class="headerlink" title="color()"></a>color()</h2><p>更多颜色修饰：<a href="https://github.com/postcss/postcss-color-function#list-of-color-adjuster" target="_blank" rel="external">https://github.com/postcss/postcss-color-function#list-of-color-adjuster</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">	<span class="attribute">color</span>: <span class="built_in">color</span>(red alpha(-10%));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">	<span class="attribute">color</span>: <span class="built_in">color</span>(red blackness(80%));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#ff0000</span>;</div><div class="line">	<span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 0, 0, 0.9);</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">	<span class="attribute">color</span>: <span class="built_in">rgb</span>(51, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>更多语法规则：<a href="http://cssnext.io/" target="_blank" rel="external">http://cssnext.io/</a><br>文章源码下载：<a href="https://github.com/NalvyBoo/PostCSS-Comn/tree/master/cssnext" target="_blank" rel="external">https://github.com/NalvyBoo/PostCSS-Comn/tree/master/cssnext</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PreCSS 语法说明]]></title>
      <url>http://ningbo00.top/2017/02/16/precss/</url>
      <content type="html"><![CDATA[<h1 id="PreCSS-语法说明"><a href="#PreCSS-语法说明" class="headerlink" title="PreCSS 语法说明"></a>PreCSS 语法说明</h1><p>PreCSS是PostCSS的一种插件，用来进行CSS预编译</p>
<ul>
<li>PreCSS中的嵌套可以使用 <code>&amp;</code> 符，把父选择器复制到子选择器中</li>
<li>PreCSS使用 <code>$</code> 符声明变量，比如 <code>$color: #ccc</code></li>
<li>PreCSS中用 <code>@if</code> 和 <code>@else</code> 来控制循环</li>
<li>PreCSS中用 <code>@define-mixin mixin_name $arg1,$arg2{...}</code> 语法来声明混合宏</li>
<li>PreCSS中用 <code>@mixin mixin_name pass_arg1, pass_arg2;</code> 语法来调用混合宏</li>
<li>PreCSS中用 <code>@mixin-content</code> 保留传递内容</li>
<li>PreCSS中使用 <code>@define-extend extend_name{...}</code> 来声明可扩展的代码块</li>
<li>PreCSS中使用 <code>@extend extend_name</code> 语法来调用声明的代码扩展块</li>
<li>PreCSS可以使用 <code>@import</code> 中导入CSS文件</li>
</ul>
<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>PreCSS和其的预处理器一样，可以使用<code>&amp;</code>符，把父选择器复制到子选择器中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.menu&#123;</div><div class="line">	width: 100%;</div><div class="line">	a&#123;</div><div class="line">		text-decoration: none;</div><div class="line">	&#125;</div><div class="line">	&amp;::before&#123;</div><div class="line">		content: '';</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>嵌套后结果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.menu</span>&#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu</span> <span class="selector-tag">a</span>&#123;</div><div class="line">	<span class="attribute">text-decoration</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>使用$符声明变量，比如<code>$color: #ccc</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$text_color: #232323;</div><div class="line">$border_comn: 1px solid red;</div><div class="line">body&#123;</div><div class="line">	color: $text_color;</div><div class="line">	border: $border_comn;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后结果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#232323</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>条件判断语句，使用<code>@if</code>和<code>@else</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$column_layout: 2;</div><div class="line">.column&#123;</div><div class="line">	@if $column_layout == 2&#123;</div><div class="line">		width: 50%;</div><div class="line">		float: left;</div><div class="line">	&#125;@else&#123;</div><div class="line">		width: 100%;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后结果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.column</span>&#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">float</span>: left</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p><code>@for</code> 循环：用一个计数器变量，来设置循环的周期<br><code>@each</code> 循环：循环周期是一个列表，而不是数字  </p>
<p>注意：当变量插入到一个字符串中时，需要用括号包裹变量名，例如 <code>$(var）</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@for $i from 1 to 3&#123;</div><div class="line">	p:nth-of-type($i)&#123;</div><div class="line">		margin-left: calc(100% / $i);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后结果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="built_in">calc</span>(100% / 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="built_in">calc</span>(100% / 2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(3)</span>&#123;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="built_in">calc</span>(100% / 3);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$social: twitter,facebook,youtube;</div><div class="line">@each $icon in ($social)&#123;</div><div class="line">	.icon-$(icon)&#123;</div><div class="line">		background: url('img/$(icon).png');</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后结果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.icon-twitter</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'img/twitter.png'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.icon-facebook</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'img/facebook.png'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.icon-youtube</span>&#123;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'img/youtube.png'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="混合宏-Mixins"><a href="#混合宏-Mixins" class="headerlink" title="混合宏 Mixins"></a>混合宏 Mixins</h2><p>通过 <code>@define-mixin mixin_name $arg1, $arg2 {...}</code> 来声明一个混合宏<br>使用 <code>@mixin mixin_name pass_arg1, pass_arg2;</code> 来调用混合宏</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@define-mixin icon $network, $color&#123;</div><div class="line">	.button .$(network)&#123;</div><div class="line">		background-image: url("img/$(network).png");</div><div class="line">		background-color: $color;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin icon twitter, blue;</div><div class="line">@mixin icon youtube, red;</div></pre></td></tr></table></figure>
<p>编译后结果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.button</span> <span class="selector-class">.twitter</span>&#123;</div><div class="line">	<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"img/twitter.png"</span>);</div><div class="line">	<span class="attribute">background-color</span>: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.button</span> <span class="selector-class">.youtube</span>&#123;</div><div class="line">	<span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"img/youtube.png"</span>);</div><div class="line">	<span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="传递内容-mixin-content"><a href="#传递内容-mixin-content" class="headerlink" title="传递内容 @mixin-content"></a>传递内容 @mixin-content</h2><p>除了可以传递参数之外，还可以保留传递内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@define-mixin icon $network,$color&#123;</div><div class="line">	.button .$(network)&#123;</div><div class="line">		background-image: url('img/$(network).png');</div><div class="line">		background-color: $color;</div><div class="line">		@mixin-content;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin icon twitter, blue&#123;</div><div class="line">	width: 3rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.button .twitter&#123;</div><div class="line">	background-image: url(&apos;img/twitter.png&apos;);</div><div class="line">	background-color: blue;</div><div class="line">	width: 48px;</div><div class="line">	width: 3rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>创建一个多次复用的代码块<br>使用 <code>@define-extend extend_name{...}</code> 方式来声明扩展的代码块。<br>通过 <code>@extend extend_name</code> 来调用声明的代码块。<br>合并重复的样式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@define-extend rounded_button&#123;</div><div class="line">	border-radius: 0.5rem;</div><div class="line">	padding: 1rem;</div><div class="line">	border-width: 0.0625rem;</div><div class="line">	border-style: solid;</div><div class="line">&#125;</div><div class="line">.blue_button&#123;</div><div class="line">	@extend rounded_button;</div><div class="line">	border-color: rgba(0,0,0,0.2);</div><div class="line">	background-color: #333;</div><div class="line">&#125;</div><div class="line">.red_button&#123;</div><div class="line">	@extend rounded_button;</div><div class="line">	border-color: rgba(255,255,255,0.2);</div><div class="line">	background-color: #666;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译后结果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.blue_button</span>, <span class="selector-class">.red_button</span>&#123;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">16px</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">1rem</span>;</div><div class="line">	<span class="attribute">border-width</span>: <span class="number">1px</span>;</div><div class="line">	<span class="attribute">border-width</span>: <span class="number">0.0625rem</span>;</div><div class="line">	<span class="attribute">border-style</span>: solid;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.blue_button</span>&#123;</div><div class="line">	<span class="attribute">border-color</span>: <span class="number">#000000</span>;</div><div class="line">	<span class="attribute">border-color</span>: <span class="built_in">rgba</span>(0,0,0,0.2);</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.red_button</span>&#123;</div><div class="line">	<span class="attribute">border-color</span>: <span class="number">#ffffff</span>;</div><div class="line">	<span class="attribute">border-color</span>: <span class="built_in">rgba</span>(255,255,255,0.2);</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#666</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>源码下载：<a href="https://github.com/NalvyBoo/PostCSS-Comn/tree/master/precss" target="_blank" rel="external">https://github.com/NalvyBoo/PostCSS-Comn/tree/master/precss</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostCSS-Comn使用说明]]></title>
      <url>http://ningbo00.top/2017/02/15/postCSS-Comn/</url>
      <content type="html"><![CDATA[<h1 id="PostCSS-Comn"><a href="#PostCSS-Comn" class="headerlink" title="PostCSS-Comn"></a>PostCSS-Comn</h1><p>PostCSS-Comn使用说明，整合PostCSS常用功能<br>GitHub：<code>https://github.com/NalvyBoo/PostCSS-Comn</code></p>
<h2 id="插件作用"><a href="#插件作用" class="headerlink" title="插件作用"></a>插件作用</h2><ul>
<li>支持CSS未来语法</li>
<li>自动补全浏览器私有前缀</li>
<li>CSS预处理（整合Sass、LESS或Stylus功能，语法基本和Sass的相同）</li>
<li>通过@import，整合多个CSS文件</li>
<li>将相同的CSS媒体查询规则合并为一个</li>
<li>压缩CSS文件</li>
<li>给rgba颜色创建降级方案(添加备用颜色)</li>
<li>给opacity提供降级方案（给IE浏览器添加滤镜属性）</li>
<li>让IE8支持rem单位</li>
<li>将伪元素的<code>::</code>转换为<code>:</code>(IE8不支持<code>::</code>)</li>
</ul>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol>
<li><a href="http://www.w3cplus.com/PostCSS/using-postcss-for-cross-browser-compatibility.html" target="_blank" rel="external">全局安装Gulp</a></li>
<li>复制<a href="https://github.com/NalvyBoo/PostCSS-Comn" target="_blank" rel="external">仓库文件</a>到项目目录（<code>PostCSS文件夹</code>内的内容）</li>
<li>命令终端运行：<code>npm install</code>（淘宝镜像使用该命令：<code>cnpm install</code>）</li>
<li><code>src文件夹</code> 为编辑源文件，<code>css文件夹</code> 为生成代码文件</li>
<li><code>src文件夹</code> 目录下命令终端运行：<code>gulp css</code></li>
<li><code>css文件夹</code> 内查看编译后结果</li>
</ol>
<h2 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h2><ul>
<li><a href="https://github.com/NalvyBoo/PostCSS-Comn/tree/master/precss" target="_blank" rel="external">PreCSS语法说明</a></li>
</ul>
<hr>
<h2 id="以下内容为自定义进阶"><a href="#以下内容为自定义进阶" class="headerlink" title="以下内容为自定义进阶"></a>以下内容为自定义进阶</h2><h2 id="PostCSS-Comn插件扩展"><a href="#PostCSS-Comn插件扩展" class="headerlink" title="PostCSS-Comn插件扩展"></a>PostCSS-Comn插件扩展</h2><p>以扩展<code>postcss-will-change</code>插件为例</p>
<p><strong>安装插件 项目目录下执行命令行</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install postcss-will-change --save-dev</div></pre></td></tr></table></figure>
<p><strong>配置<code>gulpfile.js</code>文件</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加此行</span></div><div class="line"><span class="keyword">var</span> will_change = <span class="built_in">require</span>(<span class="string">'postcss-will-change'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">	<span class="keyword">var</span> processors = [</div><div class="line">		<span class="comment">// 添加此行</span></div><div class="line">		will_change</div><div class="line">	]; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>完成 执行命令查看效果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp css</div></pre></td></tr></table></figure></p>
<h2 id="PostCSS配置与命令"><a href="#PostCSS配置与命令" class="headerlink" title="PostCSS配置与命令"></a>PostCSS配置与命令</h2><p><strong>淘宝镜像npm<code>cnpm</code>（写命令时，将<code>npm</code>换成<code>cnpm</code>，其他与npm语法相同）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install cnpm -g --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p><strong>全局安装<code>gulp</code></strong><br>如果之前有安装过一个全局版本的 gulp，请执行一下<code>npm rm --global gulp</code>来避免和<code>gulp-cli</code>冲突</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install --global gulp-cli</div></pre></td></tr></table></figure>
<p><strong>项目安装<code>gulp</code>（项目根目录下）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install --save-dev gulp</div></pre></td></tr></table></figure></p>
<p><strong>配置<code>package.json</code>文件</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">	<span class="attr">"name"</span>: <span class="string">"PostCSS-Comn"</span>, </div><div class="line">	<span class="attr">"version"</span>: <span class="string">"0.0.1"</span>, </div><div class="line">	<span class="attr">"description"</span>: <span class="string">"PostCSS gulp plugin"</span>, </div><div class="line">	<span class="attr">"keywords"</span>: [ </div><div class="line">		<span class="string">"gulpplugin"</span>, </div><div class="line">		<span class="string">"PostCSS"</span>, </div><div class="line">		<span class="string">"css"</span> </div><div class="line">	], </div><div class="line">	<span class="attr">"author"</span>: <span class="string">"ningbo"</span>, </div><div class="line">	<span class="attr">"license"</span>: <span class="string">"MIT"</span>, </div><div class="line">	<span class="attr">"dependencies"</span>: &#123; </div><div class="line">		<span class="attr">"postcss"</span>: <span class="string">"^5.0.0"</span>, </div><div class="line">		<span class="attr">"gulp"</span>: <span class="string">"~3.8.10"</span> </div><div class="line">	&#125;, </div><div class="line">	<span class="attr">"devDependencies"</span>: &#123; </div><div class="line">		<span class="attr">"gulp-postcss"</span>: <span class="string">"^6.0.1"</span> </div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>安装<code>gulp-postcss</code>（项目根目录下）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install --save-dev gulp-postcss</div></pre></td></tr></table></figure></p>
<p><strong>配置<code>gulpfile.js</code>文件，<code>src</code>文件为css编辑文件，<code>css</code>文件为编译生成文件</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> postcss = <span class="built_in">require</span>(<span class="string">'gulp-postcss'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">	<span class="keyword">var</span> processors = [</div><div class="line">	]; </div><div class="line">	<span class="keyword">return</span> gulp.src(<span class="string">'./src/*.css'</span>)</div><div class="line">	.pipe(postcss(processors))</div><div class="line">	.pipe(gulp.dest(<span class="string">'./css'</span>)); </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>测试（在<code>src</code>中创建测试文件<code>style.css</code>）</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.test</span>&#123;</div><div class="line">	<span class="attribute">background</span>: black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>测试运行命令，在<code>css</code>文件查看<code>style.css</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp css</div></pre></td></tr></table></figure>
<p><strong>添加PostCSS插件：<a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">Autoprefixer</a>(处理浏览器私有前缀)，<a href="http://cssnext.io/features/" target="_blank" rel="external">cssnext</a>(使用CSS未来的语法),<a href="https://github.com/jonathantneal/precss" target="_blank" rel="external">precss</a>(像Sass的函数)</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cnpm install autoprefixer --save-dev</div><div class="line">$ cnpm install cssnext --save-dev</div><div class="line">$ cnpm install precss --save-dev</div></pre></td></tr></table></figure>
<p><strong>配置<code>gulpfile.js</code>文件</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>); </div><div class="line"><span class="keyword">var</span> cssnext = <span class="built_in">require</span>(<span class="string">'cssnext'</span>); </div><div class="line"><span class="keyword">var</span> precss = <span class="built_in">require</span>(<span class="string">'precss'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> processors = [</div><div class="line">	autoprefixer,</div><div class="line">	cssnext,</div><div class="line">	precss</div><div class="line">];</div></pre></td></tr></table></figure>
<p><strong>运行命令，在<code>css</code>文件查看<code>style.css</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp css</div></pre></td></tr></table></figure>
<h2 id="PostCSS入门教程"><a href="#PostCSS入门教程" class="headerlink" title="PostCSS入门教程"></a>PostCSS入门教程</h2><p>source:<a href="http://www.w3cplus.co" target="_blank" rel="external">http://www.w3cplus.com</a></p>
<ul>
<li><a href="http://www.w3cplus.com/PostCSS/postcss-deep-dive-what-you-need-to-know.html" target="_blank" rel="external">PostCSS深入学习：你需要知道什么</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/postcss-quickstart-guide-instant-setup-options.html" target="_blank" rel="external">PostCSS深入学习：设置选项</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/postcss-quickstart-guide-gulp-setup.html" target="_blank" rel="external">PostCSS深入学习：Gulp设置</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/postcss-quickstart-guide-grunt-setup.html" target="_blank" rel="external">PostCSS深入学习：Grunt配置</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/postcss-quickstart-guide-exploring-plugins.html" target="_blank" rel="external">PostCSS深入学习: 管理插件</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/using-postcss-for-cross-browser-compatibility.html" target="_blank" rel="external">PostCSS深入学习: 跨浏览器兼容性</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/using-postcss-for-minification-and-optimization.html" target="_blank" rel="external">PostCSS深入学习: 压缩和优化CSS</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/postcss-deep-dive-preprocessing-with-precss.html" target="_blank" rel="external">PostCSS深入学习: PreCSS的使用</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/postcss-deep-dive-roll-your-own-preprocessor.html" target="_blank" rel="external">PostCSS深入学习: 定制自己的预处理器</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/using-postcss-together-with-sass-stylus-or-less.html" target="_blank" rel="external">PostCSS深入学习: PostCSS和Sass、Stylus或LESS一起使用</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/using-postcss-with-bem-and-suit-methodologies.html" target="_blank" rel="external">PostCSS深入学习: 结合BEM和SUIT方法使用PostCSS</a></li>
<li><a href="http://www.w3cplus.com/PostCSS/postcss-deep-dive-shortcuts-and-shorthand.html" target="_blank" rel="external">PostCSS深入学习: 简写和速写</a></li>
<li><a href="http://www.w3cplus.com/preprocessor/getting-started-with-postcss-a-quick-guide-for-sass-users.html" target="_blank" rel="external">PostCSS入门：Sass用户入门指南</a></li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><a href="http://codepen.io/" target="_blank" rel="external">CodePen</a></li>
<li><a href="https://prepros.io/" target="_blank" rel="external">Prepros</a></li>
</ul>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件列表：<a href="https://github.com/postcss/postcss#plugins" target="_blank" rel="external">Github</a> | <a href="http://postcss.parts/" target="_blank" rel="external">postcss.parts</a></p>
<p>常用插件：</p>
<ul>
<li><a href="http://cssnext.io/features/" target="_blank" rel="external">cssnext</a>：CSS未来语法</li>
<li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">Autoprefixer</a>：自动补全浏览器私有前缀</li>
<li><a href="https://github.com/jonathantneal/precss" target="_blank" rel="external">precss</a>：CSS预处理（整合Sass、LESS或Stylus功能，语法基本和Sass的相同）</li>
<li><a href="https://github.com/postcss/postcss-import" target="_blank" rel="external">postcss-import</a>：通过@import，整合多个CSS文件</li>
<li><a href="https://github.com/hail2u/node-css-mqpacker" target="_blank" rel="external">css-mqpacker</a>：将相同的CSS媒体查询规则合并为一个</li>
<li><a href="http://cssnano.co/" target="_blank" rel="external">cssnano</a>：压缩CSS文件</li>
<li><a href="https://github.com/postcss/postcss-color-rgba-fallback" target="_blank" rel="external">postcss-color-rgba-fallback</a>：给rgba颜色创建降级方案(添加备用颜色)</li>
<li><a href="https://github.com/iamvdo/postcss-opacity" target="_blank" rel="external">postcss-opacity</a>：给opacity提供降级方案（给IE浏览器添加滤镜属性）</li>
<li><a href="https://github.com/robwierzbowski/node-pixrem" target="_blank" rel="external">node-pixrem</a>：让IE8支持rem单位</li>
<li><a href="https://github.com/axa-ch/postcss-pseudoelements" target="_blank" rel="external">postcss-pseudoelements</a>：将伪元素的<code>::</code>转换为<code>:</code>(IE8不支持<code>::</code>)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[H5解锁样式绘图（九宫格样式扩展）]]></title>
      <url>http://ningbo00.top/2017/02/09/H5lock/</url>
      <content type="html"><![CDATA[<h1 id="H5解锁样式绘图（九宫格样式扩展，支持Canvas和图片）"><a href="#H5解锁样式绘图（九宫格样式扩展，支持Canvas和图片）" class="headerlink" title="H5解锁样式绘图（九宫格样式扩展，支持Canvas和图片）"></a>H5解锁样式绘图（九宫格样式扩展，支持Canvas和图片）</h1><p>H5九宫格解锁 样式绘图（支持Canvas和图片）</p>
<pre><code>http://test.go.163.com/go/2016/1227/H5lock/src/H5lock.js
</code></pre><p>Github：<a href="https://github.com/NalvyBoo/H5lock/" target="_blank" rel="external">https://github.com/NalvyBoo/H5lock/</a></p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="https://github.com/NalvyBoo/H5lock/blob/master/qr-code/qr-code.png?raw=true" alt="qr-code"></p>
<p><a href="http://test.go.163.com/go/2016/1227/H5lock/" target="_blank" rel="external">http://test.go.163.com/go/2016/1227/H5lock/</a></p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><pre><code>&lt;canvas id=&quot;canvas&quot; width=&quot;400&quot; height=&quot;600&quot;&gt;&lt;/canvas&gt;
</code></pre><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;src/H5lock.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    var lock = new H5lock({});
    lock.init(n,m,H5lockImgSrc);//n:列数 m:行数 H5lockImgSrc:图片路径
&lt;/script&gt;
</code></pre><h3 id="Option-method"><a href="#Option-method" class="headerlink" title="Option method"></a>Option method</h3><pre><code>lock.reset(); //页面重置
</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code>&lt;div id=&quot;canvas-box&quot;&gt;
    &lt;a id=&quot;updatePassword&quot;&gt;重置&lt;/a&gt;
    &lt;canvas id=&quot;canvas&quot; width=&quot;400&quot; height=&quot;600&quot;&gt;&lt;/canvas&gt;
&lt;/div&gt;  
</code></pre><hr>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;src/H5lock.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    // 初始化
    var lock = new H5lock({});
    //4列,6行,图片路径
    lock.init(4,6,&quot;src/star3.png&quot;);
    // 重置按钮
    document.getElementById(&apos;updatePassword&apos;).addEventListener(&apos;click&apos;, function(){
        lock.reset();
    });
&lt;/script&gt;
</code></pre><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><p>H5Lock.js自定义</p>
<h3 id="初始页面效果"><a href="#初始页面效果" class="headerlink" title="初始页面效果"></a>初始页面效果</h3><pre><code>H5lock.prototype.drawCle = function(x, y) { // 初始化解锁面板
    // 线条颜色
    this.ctx.strokeStyle = &apos;#CFE6FF&apos;;
    // 线条宽度
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();
    this.ctx.arc(x, y, this.r, 0, Math.PI * 2, true);
    this.ctx.closePath();
    this.ctx.stroke();
}
</code></pre><h3 id="触碰后样式"><a href="#触碰后样式" class="headerlink" title="触碰后样式"></a>触碰后样式</h3><h4 id="图片实现"><a href="#图片实现" class="headerlink" title="图片实现"></a>图片实现</h4><pre><code>H5lock.prototype.drawPoint = function() { // 初始化触碰后样式（图片）
    var imgObj = new Image();
    imgObj.src = this.H5lockImgSrc;
    for (var i = 0 ; i &lt; this.lastPoint.length ; i++) {
        var othis = this;
        this.ctx.clearRect(othis.lastPoint[i].x-(othis.r+2), othis.lastPoint[i].y-(othis.r+2), othis.r*2+4, othis.r*2+4);
        this.ctx.drawImage(imgObj,othis.lastPoint[i].x-(othis.r+1), othis.lastPoint[i].y-(othis.r+1), othis.r*2+2, othis.r*2+2);
    }
}
</code></pre><h4 id="Canvas实现"><a href="#Canvas实现" class="headerlink" title="Canvas实现"></a>Canvas实现</h4><pre><code>H5lock.prototype.drawPoint = function() { // 初始化触碰后样式（Canvas画圆心）
    for (var i = 0 ; i &lt; this.lastPoint.length ; i++) {
        // 填充颜色
        this.ctx.fillStyle = &apos;#CFE6FF&apos;;
        this.ctx.beginPath();
        this.ctx.arc(this.lastPoint[i].x, this.lastPoint[i].y, this.r / 2, 0, Math.PI * 2, true);
        this.ctx.closePath();
        this.ctx.fill();
    }
}
</code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>报错：<code>Failed to execute &#39;getImageData&#39; on &#39;CanvasRenderingContext2D&#39;: The canvas has been tainted by cross-origin data.</code><br>原因：getImageData此方法不允许操作非此域名外的图片资源，即使是子域也不行<br>解决办法：  </p>
<ul>
<li>使用本地服务器进行测试</li>
<li><a href="http://www.bkjia.com/webzh/994015.html" target="_blank" rel="external">–disable-web-security</a></li>
<li><a href="http://blog.csdn.net/molaifeng/article/details/42293509" target="_blank" rel="external">将图片转换成为字符串保存在浏览器，使用时再转换</a></li>
</ul>
<hr>
<p>H5解锁密码识别功能：<a href="https://github.com/lvming6816077/H5lock" target="_blank" rel="external">https://github.com/lvming6816077/H5lock</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3 鲜为人知的属性]]></title>
      <url>http://ningbo00.top/2017/02/03/CSS3/</url>
      <content type="html"><![CDATA[<h1 id="CSS3-鲜为人知的属性"><a href="#CSS3-鲜为人知的属性" class="headerlink" title="CSS3 鲜为人知的属性"></a>CSS3 鲜为人知的属性</h1><h2 id="webkit-tap-highlight-color"><a href="#webkit-tap-highlight-color" class="headerlink" title="-webkit-tap-highlight-color"></a>-webkit-tap-highlight-color</h2><p>这个属性只用于iOS (iPhone和iPad)。当你点击一个链接或者通过Javascript定义的可点击元素的时候，它就会出现一个半透明的灰色背景。要重设这个表现，你可以设置-webkit-tap-highlight-color为任何颜色。<br>想要禁用这个高亮，设置颜色的alpha值为0即可。</p>
<p>示例：设置高亮色为50%透明的红色:  </p>
<pre><code>-webkit-tap-highlight-color: rgba(255,0,0,0.5);
</code></pre><p>浏览器支持: 只有iOS(iPhone和iPad).</p>
<h2 id="webkit-text-size-adjust"><a href="#webkit-text-size-adjust" class="headerlink" title="webkit-text-size-adjust"></a>webkit-text-size-adjust</h2><ol>
<li><p>当样式表里font-size&lt;12px时，中文版chrome浏览器里字体显示仍为12px，这时可以用</p>
<pre><code>html{-webkit-text-size-adjust:none;}
</code></pre></li>
<li><p>-webkit-text-size-adjust放在body上会导致页面缩放失效</p>
</li>
<li><p>body会继承定义在html的样式</p>
</li>
<li><p>用-webkit-text-size-adjust不要定义成可继承的或全局的</p>
</li>
</ol>
<h2 id="outline：none"><a href="#outline：none" class="headerlink" title="outline：none"></a>outline：none</h2><ol>
<li><p>在pc端为a标签定义这个样式的目的是为了取消ie浏览器下点击a标签时出现的虚线。ie7及以下浏览器还不识别此属性，需要在a标签上添加 <code>hidefocus=&quot;true&quot;</code></p>
</li>
<li><p><code>input，textarea{outline:none}</code> 取消chrome下默认的文本框聚焦样式</p>
</li>
<li><p>在移动端是不起作用的，想要去除文本框的默认样式可以使用 <code>-webkit-appearance</code>，聚焦时候默认样式的取消是 <code>-webkit-tap-highlight-color</code> 。看到一些移动端reset文件加了此属性，其实是多余。</p>
</li>
</ol>
<h2 id="webkit-appearance"><a href="#webkit-appearance" class="headerlink" title="webkit-appearance"></a>webkit-appearance</h2><p><code>-webkit-appearance: none;//消除输入框和按钮的原生外观，在iOS上加上这个属性才能给按钮和输入框自定义样式 。</code></p>
<p>注意：不同type的input使用这个属性之后表现不一。text、button无样式，radio、checkbox直接消失</p>
<h2 id="webkit-user-select"><a href="#webkit-user-select" class="headerlink" title="-webkit-user-select"></a>-webkit-user-select</h2><pre><code>-webkit-user-select: none; // 禁止页面文字选择 ，此属性不继承，一般加在body上规定整个body的文字都不会自动调整
</code></pre><h2 id="webkit-touch-callout"><a href="#webkit-touch-callout" class="headerlink" title="-webkit-touch-callout"></a>-webkit-touch-callout</h2><pre><code>-webkit-touch-callout:none;&amp;nbsp;&amp;nbsp;// 禁用长按页面时的弹出菜单(iOS下有效) ,img和a标签都要加
</code></pre><h1 id="CSS3那些不为人知的高级属性"><a href="#CSS3那些不为人知的高级属性" class="headerlink" title="CSS3那些不为人知的高级属性"></a>CSS3那些不为人知的高级属性</h1><p>尽管现代浏览器已经支持了众多的CSS3属性，但是大部分设计师和开发人员貌似依然在关注于一些很“主流”的属性，如border-radius、box-shadow或者transform等。它们有良好的文档、很好的测试并且最常用到，所以如果你最近在设计网站，你很难能脱离它们。</p>
<p>但是，隐藏在浏览器的大宝库中是一些高级的、被严重低估的属性，但是它们并没有得到太多的关注。或许它们中的一些应该这样(被无视)，但是其它的属性应该得到更多的认可。最伟大的财富隐藏在Webkit的下面，而且在iPhone、iPad和Android apps的时代，开始了解它们会灰常有用。就连Firefox等使用的Gecko引擎，也提供了一些独特的属性。在本文中，我们将看一下鲜为人知的CSS 2.1和CSS3属性以及它们在现代浏览器中的支持情况。</p>
<p><strong>说明:</strong>&nbsp;对于每个属性，我们这里规定：”<strong>WebKit</strong>” 即指代使用Webkit内核的浏览器(Safari、Chrome、iPhone、iPad、Android等)，”<strong>Gecko</strong>“指代采用Gecko内核的浏览器(Firefox等)。然后有的属性是官方<a href="http://www.w3.org/TR/CSS21" target="_blank" rel="external"><strong>CSS 2.1.</strong></a>&nbsp;规范的一部分，这意味着更多的浏览器甚至一些古老的浏览器也会支持它们。最后，一个<a href="http://www.w3.org/Style/CSS/current-work" target="_blank" rel="external"><strong>CSS3</strong></a>&nbsp;的标签标明遵守这个标准，被最新的浏览器版本——比如Firefox 4、Chrome 10、Safari 5、Opera 11.10以及IE9支持的属性。</p>
<h2 id="WebKit特有属性"><a href="#WebKit特有属性" class="headerlink" title="WebKit特有属性"></a>WebKit特有属性</h2><h3 id="webkit-mask"><a href="#webkit-mask" class="headerlink" title="-webkit-mask"></a>-webkit-mask</h3><p>这个属性是相当强大的，所以详细的介绍超出了本文的范畴，它非常值得深入研究，因为它可以在实际应用中为你省掉很多时间。</p>
<p><code>-webkit-mask</code> 让为一个元素添加蒙板成为可能，从而你可以创建任意形状的花样。蒙板可以是CSS3渐变或者半透明的PNG图片。蒙板元素的alpha值为0的时候会覆盖下面的元素，为1的时候会完全显示下面的内容。相关的属性有<code>-webkit-mask-clip</code>、 <code>-webkit-mask-position</code> 和<code>-webkit-mask-repeat</code>等，严重依赖来自于background中的语法。更多信息请查看<a href="http://www.webkit.org/blog/181/css-masks" target="_blank" rel="external">webkit的博客</a>。</p>
<p><strong>示例</strong></p>
<p>图片蒙板:</p>
<pre><code>.element{
    background: url(img/image.jpg) repeat;
    -webkit-mask: url(img/mask.png);
}
</code></pre><p><strong>示例</strong></p>
<p>渐变蒙板:</p>
<pre><code>.element2 {
    background: url(img/image.jpg) repeat;
    -webkit-mask: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,1)), to(rgba(0,0,0,0)));
}
</code></pre><p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-SW17" target="_blank" rel="external">Safari Developer Library</a></p>
<h3 id="webkit-text-stroke"><a href="#webkit-text-stroke" class="headerlink" title="-webkit-text-stroke"></a>-webkit-text-stroke</h3><p>CSS边框的一个不足就是只有矩形的元素才能使用。<code>-webkit-text-stroke</code> 可以为文字添加边框。它不但可以设置文字边框的宽度，也能设置其颜色。而且，配合使用<code>color: transparent</code> 属性，你还可以创建镂空的字体！</p>
<p><strong>示例</strong></p>
<p>为所有的&lt;h1&gt;标题设定一个2px宽的蓝色边框:</p>
<pre><code>h1{-webkit-text-stroke: 2px blue};
</code></pre><p>另一个特性是，通过设定1px的透明边框，可以让文字变得平滑:</p>
<pre><code>h2{-webkit-text-stroke: 1px transparent}
</code></pre><p>创建红色镂空字体：</p>
<pre><code>h3{
    color: transparent;
    -webkit-text-stroke: 4px red;
}
</code></pre><p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/css/property/-webkit-text-stroke" target="_blank" rel="external">Safari Developer Library</a></p>
<h3 id="webkit-nbsp-mode"><a href="#webkit-nbsp-mode" class="headerlink" title="-webkit-nbsp-mode"></a>-webkit-nbsp-mode</h3><p>换行有时是很棘手的事情：有时你希望文字在适当的地方断行(而不是折行)，有时你又不想这样。一个能控制这个的属性就是 <code>-webkit-nbsp-mode</code>，它让你可以改变&amp;nbsp;空白符的行为，强制文字在它被用到的地方断行。通过设置值为space即可实现。</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266--webkit-nbsp-mode" target="_blank" rel="external">Safari Developer Library</a></p>
<h3 id="webkit-tap-highlight-color-1"><a href="#webkit-tap-highlight-color-1" class="headerlink" title="-webkit-tap-highlight-color"></a>-webkit-tap-highlight-color</h3><p>这个属性只用于iOS (iPhone和iPad)。当你点击一个链接或者通过Javascript定义的可点击元素的时候，它就会出现一个半透明的灰色背景。要重设这个表现，你可以设置<code>-webkit-tap-highlight-color</code> 为任何颜色。</p>
<p>想要禁用这个高亮，设置颜色的alpha值为0即可。</p>
<p><strong>示例</strong></p>
<p>设置高亮色为50%透明的红色:</p>
<pre><code>-webkit-tap-highlight-color: rgba(255,0,0,0.5);
</code></pre><p><strong>浏览器支持</strong>: 只有iOS(iPhone和iPad).</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-_webkit_tap_highlight_color" target="_blank" rel="external">Safari Developer Library</a></p>
<h3 id="zoom-reset"><a href="#zoom-reset" class="headerlink" title="zoom: reset"></a>zoom: reset</h3><p>通常来说，zoom是一个IE专用的属性。但是webkit也开始支持它了，而且使用值reset，webkit可以实现不错的效果(有趣的是，IE不支持这个值)。它让你重设掉浏览器中正常的缩放行为——如果某个元素被声明了<code>zoom:reset</code>，页面上的<strong>其它元素</strong>在用户放大页面的时候都会跟着放大。</p>
<p>注：其实，我们常用来禁用chrome强制字体大小的时候用到的<code>-webkit-text-size-adjust:none;</code>也是可以实现类似的效果，不同的是，设置该属性的元素内的文字不会被放大/缩小，但是页面上的其它元素则会变化——神飞</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-SW15" target="_blank" rel="external">Safari Developer Library</a></p>
<h3 id="webkit-margin-collapse"><a href="#webkit-margin-collapse" class="headerlink" title="-webkit-margin-collapse"></a>-webkit-margin-collapse</h3><p>这个属性属于限制级的，但是它还是非常值得关注。通常，两个相邻的元素的margin会折叠起来(collapse)。这意味着第一个元素的底部的边距和第二个元素的头部边距会被合并到一起。</p>
<p>最常见的例子就是两个相邻的&lt;p&gt;元素会共享他们的margin值。想要控制这个表现，我们可以使用 <code>-webkit-margin-collapse</code> 及其分拆后的 <code>-webkit-margin-top-collapse</code> 、<code>-webkit-margin-bottom-collapse</code> 等属性。默认值是collapse，值separate则停止共享margin值，也就是说，第一个元素的底部边距和第二个元素的头部边距会正常叠加。</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266--webkit-margin-collapse" target="_blank" rel="external">Safari Developer Library</a></p>
<h3 id="webkit-box-reflect"><a href="#webkit-box-reflect" class="headerlink" title="-webkit-box-reflect"></a>-webkit-box-reflect</h3><p>你还记得几乎每个网站都把他们的网站logo或者头部的文字做成倒影的那个年代吗？谢天谢地，那个年代已经过去了，但是如果你要在一些按钮、导航、或者其他UI元素上更好的使用这个技术，<code>-webkit-box-reflect</code> 是更好的选择。</p>
<p>这个属性接受above、below、left和right四个关键词，它们设置倒影的方向，它们和一个设置元素和它的倒影建的距离的数字一起使用。同时，蒙板图片也是同样支持的(看上面的-webkit-mask部分，不要搞混了哈)。倒影会自动生成并对布局<strong>没有影响</strong>。下面的元素只用了CSS，第二个按钮用了<code>-webkit-box-reflect</code> 属性。</p>
<p><strong>示例</strong></p>
<p>这个倒影会出现在它的父元素的下面并有5px的间距:</p>
<pre><code>-webkit-box-reflect: below 5px;
</code></pre><p>这个倒影会投射到元素的右边，没有间距。然后，一个蒙板将会被应用(url(mask.png)):</p>
<pre><code>-webkit-box-reflect: right 0 url(mask.png);
</code></pre><p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-SW16" target="_blank" rel="external">Safari Developer Library</a></p>
<h3 id="webkit-marquee"><a href="#webkit-marquee" class="headerlink" title="-webkit-marquee"></a>-webkit-marquee</h3><p>另一个属性让我们回到美好的从前：那个遍地marquee(跑马灯)的年代。有趣的是这个已经被遗弃的标签反而在现在变的很有用，比如我们在比较小的手机屏幕上切换内容，如果不断行的话文字将不能完全显示。</p>
<p><a href="http://i.ozpda.com/ozweather/" target="_blank" rel="external">ozPDA</a>创建的这个天气的应用很好的使用了它。 (如果你木有看到变换的文字，可以尝试换一个城市来体验。需要使用WebKit内核浏览器)</p>
<p><strong>示例</strong></p>
<pre><code>.marquee {
    white-space: nowrap;
    overflow:-webkit-marquee;
    width: 70px;
    -webkit-marquee-direction: forwards;
    -webkit-marquee-speed: slow;
    -webkit-marquee-style: alternate;
}
</code></pre><p>要让marquee工作需要一些前提条件。首先，white-space必须设置为nowrap，这样才能让文字不自动换行，其次，overflow必须设置为-webkit-marquee，宽度也要设置为比文字实际长度小的数值。</p>
<p>剩下的属性确保文字从左边滚动到右边(<code>-webkit-marquee-direction</code>)、来回移动(<code>-webkit-marquee-style</code>)以及以比较低的速度移动(<code>-webkit-marquee-speed</code>)。其它的属性有-<code>webkit-marquee-repetition</code>，用来定义marquee重复的次数，<code>-webkit-marquee-increment</code>, 定义每次递增的速度变化。</p>
<p>注：虽然HTML的marquee标签在XHTML中被抛弃了，但是各浏览器还是支持的，但是有一个问题就是，marquee标签可能会占用比较大的cpu，<a href="http://ooxx.me/" target="_blank" rel="external">大猫</a>对其进行了深入的研究，结论是marquee的速度不能太快，而webkit用-webkit-marquee属性是最好的——神飞。</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-_webkit_marquee" target="_blank" rel="external">Safari Developer Library</a></p>
<h2 id="Gecko特有属性"><a href="#Gecko特有属性" class="headerlink" title="Gecko特有属性"></a>Gecko特有属性</h2><h3 id="font-size-adjust"><a href="#font-size-adjust" class="headerlink" title="font-size-adjust"></a>font-size-adjust</h3><p>这个有用的CSS3属性目前只有Firefox支持。我们可以用它来设定指定元素的文字大小(font-size)应该相对于小写字母的高度(x-height)而不是大写字母的高度(cap height)。比如，Verdana比同型号的Times字体更清晰，它有着更矮的x-height。为了弥补这个缺陷，我们可以用font-size-adjust属性来纠正后者。</p>
<p>该属性在拥有不同的x-height的字体上非常有用。即便你在小心的使用小号字体，在问题出现时<code>font-size-adjust</code> 也能提供解决方案。</p>
<p><strong>示例</strong></p>
<p>如果由于某种原因用户的电脑上没有安装Verdana，那么Arial就会被修正，从而和Verdana有相同的长宽比(0.58)。</p>
<pre><code>p{
    font-family:Verdana, Arial, sans-serif;
    font-size: 12px;
    font-size-adjust: 0.58;
}
</code></pre><p><strong>浏览器支持</strong>: Gecko.</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="https://developer.mozilla.org/en/CSS/font-size-adjust" target="_blank" rel="external">Mozilla Developer Network</a></p>
<h3 id="image-rendering"><a href="#image-rendering" class="headerlink" title="image-rendering"></a>image-rendering</h3><p>n年前，图片并不会被按照其原始大小显示，而是被设计师给缩放掉。取决于缩放的大小和上下文，图片可能会在浏览器中展现的不太好或者干脆就是错掉了的。现在，浏览器有了更好的算法来显示缩放的图片，不过，在你的图片被缩放后完全的控制其表现也是件很赞的事情。</p>
<p>如果你的图片有比较锐的线条并希望他们在缩放后保持它，这个Gecko私有属性就显得特别有用。相关的值是-moz-crisp-edges。同样的算法也用在optimizeSpeed，而auto 和optimizeQuality 定义为标准行为(用可行的最佳质量来缩放元素)。 image-rendering 属性同样可以用于&lt;video&gt; 和&lt;canvas&gt;元素，和用于背景图片一样。这是个CSS3 标准属性，但是目前只有Firefox支持。</p>
<p>值得注意的是，<code>-ms-interpolation-mode: bicubic</code>，尽管它是个IE专有属性。然而，它让Internet Explorer 7 在缩放图片后将其渲染为比较高的质量。由于这个浏览器默认处理的很烂，所以这个属性可能会很有用。</p>
<p><strong>浏览器支持</strong>: Gecko.</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="https://developer.mozilla.org/en/CSS/image-rendering" target="_blank" rel="external">Mozilla Developer Network</a></p>
<h3 id="moz-border-top-colors"><a href="#moz-border-top-colors" class="headerlink" title="-moz-border-top-colors"></a>-moz-border-top-colors</h3><p>这个属性可以归类为’养眼’。它让你可以在border宽度大于1px的时候为其设置不同的边框颜色。当然<code>-moz-border-bottom-colors</code>, <code>-moz-border-left-colors</code> 和 <code>-moz-border-right-colors</code>也是可用的。</p>
<p>不爽的是，没有一个简写的 <code>-moz-border-colors</code> 缩写，所以每个边框都要分开设置。同时，border-width要和给到的颜色的数量保持一致，否则，最后的那个颜色值会填充到剩下的宽度。</p>
<p><strong>示例</strong></p>
<p>这个例子中，元素的左右两边边框会是标准的橙色，上下则有种类似渐变的颜色——红黄蓝三色。</p>
<pre><code>div {
    border: 3px solid orange;
    -moz-border-top-colors: red yellow blue;
    -moz-border-bottom-colors: red yellow blue;
}
</code></pre><p><strong>浏览器支持</strong>: Gecko.</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="https://developer.mozilla.org/en/CSS/-moz-border-top-colors" target="_blank" rel="external">Mozilla Developer Network</a></p>
<h2 id="混合属性"><a href="#混合属性" class="headerlink" title="混合属性"></a>混合属性</h2><h3 id="webkit-user-select-和-moz-user-select"><a href="#webkit-user-select-和-moz-user-select" class="headerlink" title="-webkit-user-select 和 -moz-user-select"></a>-webkit-user-select 和 -moz-user-select</h3><p>或许你常常不希望用户在你的网站上选择文本，无论是否是出于版权的原因。通常大家会有js来实现，另一个方案就是，将-webkit-user-select 和-moz-user-select 的值设为none。</p>
<p>请谨慎使用这个属性：因为大部分用户是来查看信息的，他们可以复制并存储下来以备将来之用，所以这种方法既无用也无效。如果你禁用了复制粘贴功能，用户还是可以通过查看源文件来获取到他们想要的内容。搞不懂这个属性为什么会被webkit和gecko支持。</p>
<p><strong>浏览器支持</strong>: WebKit, Gecko.</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/css/property/-webkit-text-stroke" target="_blank" rel="external">Safari Developer Library</a>,&nbsp;<a href="https://developer.mozilla.org/en/CSS/-moz-user-select" target="_blank" rel="external">Mozilla Developer Network</a></p>
<h3 id="webkit-appearance-和-moz-appearance"><a href="#webkit-appearance-和-moz-appearance" class="headerlink" title="-webkit-appearance 和 -moz-appearance"></a>-webkit-appearance 和 -moz-appearance</h3><p>你曾经想过将一张图片伪装成单选按钮么？或者，一个输入框看起来像一个复选框？那么现在appearance 出现了。即便你并不想要让一个链接看起来总是像个按钮，下面这个例子也可以让你了解到，只要你愿意就可以做到的：</p>
<p><strong>示例</strong></p>
<pre><code>a {
    -webkit-appearance: button;
    -moz-appearance: button;
}
</code></pre><p><strong>浏览器支持</strong>: WebKit, Gecko.</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/css/property/-webkit-text-stroke" target="_blank" rel="external">Safari Developer Library</a>,&nbsp;<a href="https://developer.mozilla.org/en/CSS/-moz-appearance" target="_blank" rel="external">Mozilla Developer Network</a>,&nbsp;<a href="https://developer.mozilla.org/en/CSS/text-align" target="_blank" rel="external">Mozilla Developer Network</a>,<a href="http://www.qianduan.net/css3-appearance.html" title="CSS3 appearance简介" target="_blank" rel="external">CSS3 appearance简介</a></p>
<h3 id="text-align-moz-center-webkit-center"><a href="#text-align-moz-center-webkit-center" class="headerlink" title="text-align: -moz-center/-webkit-center"></a>text-align: -moz-center/-webkit-center</h3><p>这是一个属性（或者精确来说，是个“属性值”）的存在很让人惊喜啊。要让一个块级元素居中，大家通常将其设置为margin:0 auto。但是，现在你也可以将元素的容器的text-align属性设置为-moz-center 和 -webkit-center。相应的，你也可以通过设置-moz-left、-webkit-left或-moz-right、-webkit-right将元素居左或者居右。</p>
<p><strong>浏览器支持</strong>: WebKit, Gecko.</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-text-align" target="_blank" rel="external">Safari Developer Library</a></p>
<h2 id="CSS-2-1属性"><a href="#CSS-2-1属性" class="headerlink" title="CSS 2.1属性"></a>CSS 2.1属性</h2><h3 id="counter-increment"><a href="#counter-increment" class="headerlink" title="counter-increment"></a>counter-increment</h3><p>你是否经常希望你可以让一个有序列表或者一篇文章的所有标题自动编号？不幸的是，目前尚未有CSS3属性支持。但是在CSS 2.1中，counter-increment 提供了一个解决方案。这就意味着它已经出现好些年了，而且在IE8中就已经支持了。</p>
<p>配合:before 伪元素和content 属性，counter-increment可以为所有的HTML标签添加自动的编号。即便是嵌套的编码也是支持的。</p>
<p><strong>示例</strong></p>
<p>要给标题编码，先将计算器重设一下:</p>
<pre><code>body{counter-reset: thecounter}
</code></pre><p>下面的样式让每一个&lt;h1&gt;标题都有一个”Section”的前缀，然后其后面的数字自动的递增1(这是默认的，可以省略掉)，这里thecounter是计算器的名称:</p>
<pre><code>.counter h1:before {
    counter-increment: thecounter 1;
    content:&quot;Section&quot;counter(thecounter)&quot;:&quot;;
}
</code></pre><p><strong>示例</strong></p>
<p>对于一个嵌套编码的列表，重设计数器，然后关掉&lt;ol&gt;的自动编码，因为它是无嵌套的:</p>
<pre><code>ol {
    counter-reset: section;
    list-style-type: none;
}
</code></pre><p>然后，每个&lt;li&gt;设置为自动编号，分割符是一个点(.)，后面跟着一个空格</p>
<pre><code>li:before {
    counter-increment: section;
    content: counters(section,&quot;.&quot;)&quot;&quot;;
}
</code></pre><p>HTML代码：</p>
<pre><code>&lt;ol&gt;
    &lt;li&gt;item&lt;/li&gt; &lt;!-- 1 --&gt;
    &lt;li&gt;item &lt;!-- 2 --&gt;
        &lt;ol&gt;
            &lt;li&gt;item&lt;/li&gt; &lt;!-- 1.1 --&gt;
            &lt;li&gt;item&lt;/li&gt; &lt;!-- 1.2 --&gt;
        &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;item&lt;/li&gt; &lt;!-- 3 --&gt;
&lt;ol&gt;
</code></pre><p><strong>浏览器支持</strong>: CSS 2.1.，所有的现代浏览器，IE 7+.</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://www.w3.org/TR/CSS21/generate.html#counters" target="_blank" rel="external">W3C</a>，<a href="http://www.qianduan.net/css-content-counter-increment-counter-reset.html" target="_blank" rel="external">CSS content, counter-increment 和 counter-reset详解</a></p>
<h3 id="quotes"><a href="#quotes" class="headerlink" title="quotes"></a>quotes</h3><p>你会因为你的CMS不知道如何正确转换引用符号而纠结么？那么开始使用quotes属性吧。这样你就可以自定义任何符号了。然后你就可以用:before和:after伪元素为任何期望的元素指定引号了，悲催的是，webkit浏览器不支持这个属性——经测试，chrome 11已经开始支持这个属性了（之前的版本没有测试）。</p>
<p><strong>示例</strong></p>
<p>前面的两个符号决定第一级引用内容的引号，后面的两个用于二级引用，以此类推：</p>
<pre><code>q{
    quotes: &apos;«&apos; &apos;»&apos; &quot;‹&quot; &quot;›&quot;;
}
</code></pre><p>下面两行用于为选定元素指定引号:</p>
<pre><code>q:before {content: open-quote}
q:after {content: close-quote}
</code></pre><p>这样，&lt;p&gt;&lt;q&gt;This is a very &lt;q&gt;nice&lt;/q&gt; quote.&lt;/q&gt;&lt;/p&gt;看起来将会是酱紫的：<br><strong>«This is a very ‹nice› quote.»</strong></p>
<p><strong>浏览器支持</strong>: CSS 2.1.,除了WebKit，IE 7和IE6的所有现代浏览器。不过chrome是支持的。。。</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://www.w3.org/TR/CSS2/generate.html#quotes" target="_blank" rel="external">W3C</a></p>
<p><strong>问题：</strong>要直接的添加符号，CSS文档必须要设置为UTF-8吗？这是一个很纠结的问题。遗憾的是，我不能给出一个明确的答案。我的经验是，不必要设置什么特定的字符集，然后utf-8字符集可能会出错，因为它显示错掉的字符(比如”»”)。而是用iso-8859-1 字符集，一切就都是正常的。</p>
<p>W3C<a href="http://www.w3.org/TR/CSS21/generate.html" target="_blank" rel="external">这样描述</a>：”由于上个例子中由’quotes’定义的引号方便的定位在电脑键盘上，高质量的字符则需要不同的10646字符集。”</p>
<h2 id="你或许听说过但是没有记住的CSS3属性"><a href="#你或许听说过但是没有记住的CSS3属性" class="headerlink" title="你或许听说过但是没有记住的CSS3属性"></a>你或许听说过但是没有记住的CSS3属性</h2><p>接近尾声，让我们重温一些不太流行的以及不像border-radius和box-shadow那样被广泛需求的CSS3属性。</p>
<h3 id="text-overflow"><a href="#text-overflow" class="headerlink" title="text-overflow"></a>text-overflow</h3><p>或许你会常常遇到这个问题：某个容器对于其内的文字来说太小了，然后你不得不用javascript来截断字符串并添加”…”符号以避免文字溢出。</p>
<p>忘掉它吧！采用CSS3和text-overflow: ellipsis，如果文字比它的容器的宽度要长的话，你就可以强制文字以”…”结束它。唯一的要求是设置overflow:hidden。不幸的是，Firefox不支持这个属性，但是貌似在最近的版本中将会提供支持。</p>
<p><strong>示例</strong></p>
<pre><code>div {
    width: 100px;
    text-overflow: ellipsis;
}
</code></pre><p><strong>浏览器支持</strong>: CSS 3，所有浏览器的最新版本，除了Firefox，IE从IE6开始支持，据说Firefox到6.0也会提供支持的——希望如此吧。</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://www.w3.org/TR/2010/WD-css3-text-20101005/#text-overflow" target="_blank" rel="external">W3C</a></p>
<h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a>word-wrap</h3><p>当文字在一个比较窄的容器中时，它的某个部分可能会因为太长而不能正确的换行。比如链接就常常引起问题。如果你不想用overflow: hidden隐藏溢出的文字，那么你就可以设置 word-wrap 为break-word，它可以让字符串在到达容器的宽度限制时换行。</p>
<p><strong>示例</strong></p>
<pre><code>div{
    width: 50px;
    word-wrap: break-word;
}
</code></pre><p><strong>浏览器支持</strong>: CSS 3，所有现代浏览器。</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://www.w3.org/TR/2011/WD-css3-text-20110215/#word-wrap" target="_blank" rel="external">W3C</a></p>
<h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>如果你在使用Firefox或Chrome，那么你肯定注意到了文本框的右下角默认有个小的手柄，它可以让你调整它们的大小。这个标准的行为由CSS3 属性 resize: both实现。</p>
<p>但是它并不仅限于textarea。它可以用于所有的HTML元素。horizontal 和 vertical 值用于控制调整水平方向还是垂直方向。</p>
<p>请注意：对于display:block元素，如果设置了overflow:visible，resize属性将会无效(这一点原文描述不详——by 神飞)。</p>
<p><strong>浏览器支持</strong>: CSS3, 除了Opera和IE以为的其它最新的浏览器。</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-resize" target="_blank" rel="external">Safari Developer Library</a></p>
<h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><p>当你为一个设置了 <code>overflow:auto</code> 的元素指定背景图片的时候，当内容太多而出现滚动条后，拖动滚动条就会发现背景图片的位置是固定的，而不是随着滚动条移动。如果你想要背景图片随着内容而滚动，可以设置 <code>background-attachment:local</code> 。</p>
<p><strong>浏览器支持</strong>: CSS 3，除了Firefox以外的所有现代浏览器，Firefox是<strong>支持</strong>background-attachment属性的，只是<a href="https://developer.mozilla.org/en/CSS/background-attachment" target="_blank" rel="external">不支持local值</a>.</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://www.w3.org/TR/2011/WD-css3-text-20110215/#word-wrap" target="_blank" rel="external">W3C</a></p>
<h3 id="text-rendering"><a href="#text-rendering" class="headerlink" title="text-rendering"></a>text-rendering</h3><p>随着越来越多的网站开始用@font-face来渲染文字，易读性开始被关注了。小号字体上，文字会更容易出现。由于目前还没有CSS属性控制显示在线字体的微妙细节，你可以利用text-rendering来启用<a href="http://en.wikipedia.org/wiki/Kerning" target="_blank" rel="external">kerning</a>&nbsp;和&nbsp;<a href="http://en.wikipedia.org/wiki/Typographic_ligature" target="_blank" rel="external">ligatures</a>。</p>
<p>Gecko 和WebKit 浏览器处理这个属性的方式很不一样。前者默认启用这个特性，而后者，你需要将其设置为optimizeLegibility。</p>
<p><strong>浏览器支持</strong>: CSS3, 所有WebKit 和Firefox浏览器.</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://www.w3.org/TR/2011/WD-css3-text-20110215/#word-wrap" target="_blank" rel="external">W3C</a></p>
<h3 id="transform-rotateX-transform-rotateY"><a href="#transform-rotateX-transform-rotateY" class="headerlink" title="transform: rotateX/transform: rotateY"></a>transform: rotateX/transform: rotateY</h3><p>如果你已经开始使用CSS3，那么你可能会比较熟悉 <code>transform: rotate()</code>，这个在z轴上旋转元素的属性。</p>
<p>但是你是否也知道，它也可以更深入的旋转的(比如，围绕x轴和y轴)？ 这些变形结合<code>-webkit-backface-visibility: hidden</code> 会更合适。</p>
<p><strong>示例</strong></p>
<p>如果你鼠标经过这个元素，它将会旋转180°，倒转过来:</p>
<pre><code>div:hover {
    transform: rotateY(180deg);
}
</code></pre><p><strong>小技巧:</strong>如果只是映射一个元素，你可以设置transform为rotateX(180deg) (对应rotateY)或者设置transform 为scaleX(-1) (对应scaleY).</p>
<p><strong>浏览器支持</strong>: CSS3, WebKit、firefox、Opera以及IE9</p>
<p><strong>扩展阅读</strong>:&nbsp;<a href="http://www.w3.org/TR/2011/WD-css3-text-20110215/#word-wrap" target="_blank" rel="external">W3C</a>，<a href="http://www.qianduan.net/what-you-need-to-know-about-behavioral-css.html" title="Permanent Link: 你需要知道的CSS3 动画技术" target="_blank" rel="external">你需要知道的CSS3 动画技术</a></p>
<hr>
<p>原文链接：<a href="http://www.cnblogs.com/libin-1/p/5903350.html" target="_blank" rel="external">http://www.cnblogs.com/libin-1/p/5903350.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[web前端建站与学习常用网站]]></title>
      <url>http://ningbo00.top/2016/12/10/f2e-websites/</url>
      <content type="html"><![CDATA[<h1 id="web前端建站与学习常用网站"><a href="#web前端建站与学习常用网站" class="headerlink" title="web前端建站与学习常用网站"></a>web前端建站与学习常用网站</h1><h2 id="HTML常用手册网站"><a href="#HTML常用手册网站" class="headerlink" title="HTML常用手册网站"></a>HTML常用手册网站</h2><p>html手册，Sublime常用插件，图书、博客</p>
<p>HTML、CSS、JS在各浏览器兼容情况：<a href="http://caniuse.com/" target="_blank" rel="external">http://caniuse.com/</a></p>
<p>前端知识体系：<a href="http://www.cnblogs.com/sb19871023/p/3894452.html" target="_blank" rel="external">http://www.cnblogs.com/sb19871023/p/3894452.html</a></p>
<p>w3school在线教程：<a href="http://www.w3school.com.cn/" target="_blank" rel="external">http://www.w3school.com.cn/</a></p>
<p>菜鸟教程：<a href="http://www.runoob.com/" target="_blank" rel="external">http://www.runoob.com/</a></p>
<p>图灵程序设计丛书HTML5权威指南免费电子书：<a href="http://bestcbooks.com/B00H706BIG/" target="_blank" rel="external">http://bestcbooks.com/B00H706BIG/</a></p>
<hr>
<p>全栈开发必备的10款Sublime Text插件：<a href="http://www.php100.com/html/it/focus/2014/1128/7935.html" target="_blank" rel="external">http://www.php100.com/html/it/focus/2014/1128/7935.html</a></p>
<p>Sublime Text插件官网：<a href="https://packagecontrol.io/" target="_blank" rel="external">https://packagecontrol.io/</a></p>
<p>Sublime Text Emmet插件：<a href="http://docs.emmet.io/" target="_blank" rel="external">http://docs.emmet.io/</a></p>
<hr>
<h2 id="CSS工具网站"><a href="#CSS工具网站" class="headerlink" title="CSS工具网站"></a>CSS工具网站</h2><p>css3测试、计算工具</p>
<p>在线生成CSS代码：<a href="http://enjoycss.com/ref/chrome_extension#transform" target="_blank" rel="external">http://enjoycss.com/ref/chrome_extension#transform</a></p>
<p>CSS3动画手册、动画代码生成：<a href="http://isux.tencent.com/css3/index.html?transition-property" target="_blank" rel="external">http://isux.tencent.com/css3/index.html?transition-property</a></p>
<p>Animate.css官网：<a href="https://daneden.github.io/animate.css/" target="_blank" rel="external">https://daneden.github.io/animate.css/</a></p>
<p>贝塞尔曲线绘制取值网站：<a href="http://cubic-bezier.com/?#.17,.67,.83,.67" target="_blank" rel="external">http://cubic-bezier.com/?#.17,.67,.83,.67</a></p>
<p>px转em计算网站：<a href="http://pxtoem.com/" target="_blank" rel="external">http://pxtoem.com/</a></p>
<p>雪碧图自动生成网站：<a href="http://www.spritecow.com/" target="_blank" rel="external">http://www.spritecow.com/</a></p>
<hr>
<h2 id="字体、艺术字引用网站集合："><a href="#字体、艺术字引用网站集合：" class="headerlink" title="字体、艺术字引用网站集合："></a>字体、艺术字引用网站集合：</h2><p>Handpicked字体：<a href="https://www.fontsquirrel.com/" target="_blank" rel="external">https://www.fontsquirrel.com/</a></p>
<p>阿里妈妈webfont平台：<a href="http://www.iconfont.cn/webfont/?spm=a313x.7781069.0.0.f2EDD4#!/webfont/index" target="_blank" rel="external">http://www.iconfont.cn/webfont/?spm=a313x.7781069.0.0.f2EDD4#!/webfont/index</a></p>
<p>谷歌字体（需墙）：<a href="https://www.google.com/fonts" target="_blank" rel="external">https://www.google.com/fonts</a></p>
<p>阿里巴巴矢量图标库：<a href="http://www.iconfont.cn/" target="_blank" rel="external">http://www.iconfont.cn/</a></p>
<p>适用Bootstrap图标网站：<a href="http://www.bootcss.com/p/font-awesome/#integration" target="_blank" rel="external">http://www.bootcss.com/p/font-awesome/#integration</a></p>
<hr>
<h2 id="JavaScript常用网站"><a href="#JavaScript常用网站" class="headerlink" title="JavaScript常用网站"></a>JavaScript常用网站</h2><p>jquery、轮播图、瀑布流框架、js深度学习</p>
<p>jQuery中文网：<a href="http://jquery.cuishifeng.cn/index.html" target="_blank" rel="external">http://jquery.cuishifeng.cn/index.html</a></p>
<p>轮播图框架Swiper中文网：<a href="http://www.swiper.com.cn/" target="_blank" rel="external">http://www.swiper.com.cn/</a></p>
<p>瀑布流框架：<a href="http://masonry.desandro.com/" target="_blank" rel="external">http://masonry.desandro.com/</a></p>
<p>Tween算法：<a href="http://www.cnblogs.com/bluedream2009/archive/2010/06/19/1760909.html" target="_blank" rel="external">http://www.cnblogs.com/bluedream2009/archive/2010/06/19/1760909.html</a></p>
<p>移动端touch.js：<a href="http://blog.csdn.net/libin_1/article/details/50534611" target="_blank" rel="external">http://blog.csdn.net/libin_1/article/details/50534611</a></p>
<h2 id="JavaScript深度学习"><a href="#JavaScript深度学习" class="headerlink" title="JavaScript深度学习"></a>JavaScript深度学习</h2><p>推荐javascript-in-one-pic </p>
<p>js深度体系学习（js-in-one-pic）：<a href="https://github.com/coodict/javascript-in-one-pic/blob/master/README-zh.md" target="_blank" rel="external">https://github.com/coodict/javascript-in-one-pic/blob/master/README-zh.md</a></p>
<p>图解javascipt上下文与作用域：<a href="http://www.108js.com/article/article1/10201.html?id=1092" target="_blank" rel="external">http://www.108js.com/article/article1/10201.html?id=1092</a></p>
<p>js原型对象理解：<a href="http://blog.csdn.net/liwenqiang758/article/details/8190263" target="_blank" rel="external">http://blog.csdn.net/liwenqiang758/article/details/8190263</a></p>
<p>巧用apply、call、bind：<a href="http://www.admin10000.com/document/6711.html" target="_blank" rel="external">http://www.admin10000.com/document/6711.html</a></p>
<p>原生js封装Ajax：<a href="http://www.jb51.net/article/93037.htm" target="_blank" rel="external">http://www.jb51.net/article/93037.htm</a></p>
<hr>
<h2 id="PHP基础学习"><a href="#PHP基础学习" class="headerlink" title="PHP基础学习"></a>PHP基础学习</h2><p>php基础、json、ajax</p>
<p>PHP手册：<a href="http://www.php.net/" target="_blank" rel="external">http://www.php.net/</a></p>
<p>代码状态百科：<a href="http://baike.baidu.com/view/1311386.htm" target="_blank" rel="external">http://baike.baidu.com/view/1311386.htm</a></p>
<p>json在线校验工具：<a href="http://www.kjson.com/" target="_blank" rel="external">http://www.kjson.com/</a></p>
<p>URL编码/解码：<a href="http://tool.oschina.net/encode?type=4" target="_blank" rel="external">http://tool.oschina.net/encode?type=4</a></p>
<hr>
<h2 id="AnjularJS常用"><a href="#AnjularJS常用" class="headerlink" title="AnjularJS常用"></a>AnjularJS常用</h2><p>AnjularJS学习、工具</p>
<p>AnjularJS菜鸟教程：<a href="http://www.runoob.com/angularjs/angularjs-tutorial.html" target="_blank" rel="external">http://www.runoob.com/angularjs/angularjs-tutorial.html</a></p>
<p>AnjularJS API文档：<a href="https://angularjs.org/" target="_blank" rel="external">https://angularjs.org/</a></p>
<p>AnjularJS源码下载/CDN服务：<a href="http://www.bootcdn.cn/angular.js/" target="_blank" rel="external">http://www.bootcdn.cn/angular.js/</a></p>
<p>最适用工具WebStorm：<a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="external">http://www.jetbrains.com/webstorm/</a></p>
<p>WebStorm主题：<a href="https://github.com/daylerees/colour-schemes/tree/master/jetbrains" target="_blank" rel="external">https://github.com/daylerees/colour-schemes/tree/master/jetbrains</a></p>
<p>WebStorm2016.2.3：<a href="http://www.wuleba.com/28503.html" target="_blank" rel="external">http://www.wuleba.com/28503.html</a></p>
<hr>
<h2 id="前端进阶高级工具"><a href="#前端进阶高级工具" class="headerlink" title="前端进阶高级工具"></a>前端进阶高级工具</h2><p>前端高效开发工具</p>
<p>浏览器同步测试工具（自动刷新浏览器）：<a href="http://www.browsersync.cn/" target="_blank" rel="external">http://www.browsersync.cn/</a></p>
<p>在线压缩图片网站：<a href="https://tinypng.com/" target="_blank" rel="external">https://tinypng.com/</a></p>
<p>贴图库（免费生成图片外链）：<a href="http://www.tietuku.com/" target="_blank" rel="external">http://www.tietuku.com/</a></p>
<p>前端语言Top100实时排名：<a href="https://www.awesomes.cn/rank/?sort=hot" target="_blank" rel="external">https://www.awesomes.cn/rank/?sort=hot</a></p>
<hr>
<h2 id="建站工具"><a href="#建站工具" class="headerlink" title="建站工具"></a>建站工具</h2><p>小工具，建站必备</p>
<p>白噪音（雨声、咖啡店…）：<a href="http://soundrown.com/" target="_blank" rel="external">http://soundrown.com/</a></p>
<p>无版权高清大图：<a href="http://www.ssyer.com/" target="_blank" rel="external">http://www.ssyer.com/</a></p>
<p>Bootstrap中文网：<a href="http://www.bootcss.com/" target="_blank" rel="external">http://www.bootcss.com/</a></p>
<p>SVN团队必备：<a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="external">https://tortoisesvn.net/downloads.html</a></p>
<p>SVN源代码托管中心：<a href="http://svnchina.com/" target="_blank" rel="external">http://svnchina.com/</a></p>
<p>GitHub个人博客建站Hexo：<a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a></p>
<p>付费个人建站：<a href="https://www.strikingly.com/" target="_blank" rel="external">https://www.strikingly.com/</a></p>
<p>Markdown语法说明：<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></p>
<p>以上网站都是自己在学习和网站建设中常用的网站，一个好的工具往往可以事半功倍，在日后学习中会继续更新。</p>
<p>自己在学习html、css、js、jq、php、微信开发、AnjularJS的笔记与总结，优化无止境：<a href="https://github.com/NalvyBoo/HTML5" target="_blank" rel="external">https://github.com/NalvyBoo/HTML5</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javaScript和jQuery实现拖拽效果]]></title>
      <url>http://ningbo00.top/2016/11/10/js-and-jq-drag/</url>
      <content type="html"><![CDATA[<h1 id="javaScript实现拖拽效果"><a href="#javaScript实现拖拽效果" class="headerlink" title="javaScript实现拖拽效果"></a>javaScript实现拖拽效果</h1><p>鼠标按下移动或者手指拖动对象，对象随之移动，鼠标放开或者手指离开屏幕，对象停止移动。</p>
<h2 id="Event对象介绍"><a href="#Event对象介绍" class="headerlink" title="Event对象介绍"></a>Event对象介绍</h2><p>Event对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p>
<p>事件通常与函数结合使用，函数不会在事件发生前被执行。</p>
<h3 id="事件句柄"><a href="#事件句柄" class="headerlink" title="事件句柄"></a>事件句柄</h3><ul>
<li>onmousedown 鼠标按钮被按下</li>
<li>onmousemove 鼠标被移动</li>
<li>onmouseup 鼠标从某元素移开</li>
</ul>
<h3 id="鼠标属性"><a href="#鼠标属性" class="headerlink" title="鼠标属性"></a>鼠标属性</h3><ul>
<li>clientX 返回返回当事件被触发时鼠标指针向对于浏览器页面（或客户区）的水平坐标。</li>
<li>注释：2 级 DOM 没有提供把窗口坐标转换为文档坐标的标准方法。在 IE 以外的浏览器，使用 window.pageXOffset 和 window.pageYOffset 即可。</li>
<li>clientY 返回当事件被触发时鼠标指针向对于浏览器页面（客户区）的垂直坐标。</li>
<li>注释：注意，该坐标不考虑文档的滚动。如果事件发生在窗口的顶部，无论文档滚了多远，clientY 的值都是 0。但是，2 级 DOM 没有提供把窗口坐标转换为文档坐标的标准方法。在 IE 以外的浏览器，使用 window.pageXOffset 和 window.pageYOffset 即可</li>
<li>screenX 返回事件发生时鼠标指针相对于屏幕的水平坐标。</li>
<li>screenY 返回事件发生时鼠标指针相对于屏幕的垂直坐标。</li>
<li>offsetX,offsetY 发生事件的地点在事件源元素的坐标系统中的 x 坐标和 y 坐标。</li>
<li>offsetLeft 返回当前元素的相对水平偏移位置的偏移容器。</li>
<li>offsetTop 返回当前元素的相对垂直偏移位置的偏移容器</li>
<li>offsetHeight 返回，任何一个元素的高度包括边框和填充，但不是边距</li>
<li>offsetWidth 返回元素的宽度，包括边框和填充，但不是边距</li>
<li>offsetParent 返回元素的偏移容器</li>
<li>jQuery event.pageX 返回相对于文档左边缘的鼠标位置</li>
<li>jQuery event.pageY 返回相对于文档上边缘的鼠标位</li>
</ul>
<h2 id="javaScript实现"><a href="#javaScript实现" class="headerlink" title="javaScript实现"></a>javaScript实现</h2><ul>
<li>onmousedown</li>
<li>document.onmousemove</li>
<li><p>document.onmouseup</p>
<p>  //鼠标按下<br>  var div1 = document.getElementById(“div1”);<br>  div1.onmousedown = function(ev){</p>
<pre><code>var ev = ev || event;
//获取鼠标距离元素左边和上边的距离
//方式1：火狐旧版本不支持
//var offsetX = ev.offsetX;
//var offsetY = ev.offsetY;
//方式2
var offsetX = ev.clientX - ev.offsetLeft;
var offsetY = ev.clientY - ev.offsetTop;

//鼠标按下
document.onmousemove = function(ev){
    var ev = ev || event;
    div1.style.left = ev.clientX - this.offsetX + &quot;px&quot;;
    div1.style.top = ev.clientY - this.offsetY + &quot;px&quot;;
};
//鼠标抬起，取消移动事件
document.onmouseup = function(){
    document.onmouseup = document.onmousemove = null;
}；

return false;
</code></pre><p>  };</p>
</li>
</ul>
<p><strong>javaScript实现移动端拖拽</strong></p>
<pre><code>var isdrag=false;   
var NowLeft,disX;
var NowTop,disY; 
var oDiv2 = document.getElementById(&quot;gamecar&quot;);
oDiv2.addEventListener(&apos;touchstart&apos;,thismousedown);  
oDiv2.addEventListener(&apos;touchend&apos;,thismouseup);  
oDiv2.addEventListener(&apos;touchmove&apos;,thismousemove);  
function thismousedown(e){
    isdrag = true;   
    console.log(e);
    NowLeft = oDiv2.offsetLeft;  
    NowTop = oDiv2.offsetTop;   
    disX = e.touches[0].pageX;
    disY = e.touches[0].pageY;
    return false;
}
function thismousemove(e){   
    if(isdrag){
           oDiv2.style.left = NowLeft + e.touches[0].pageX - disX + &apos;px&apos;; 
           oDiv2.style.top = NowTop + e.touches[0].pageY - disY + &apos;px&apos;;
           return false;   
    }   
}   
function thismouseup(){  
    isdrag = false;  
};
</code></pre><p><strong>jQuery实现鼠标拖拽效果</strong></p>
<pre><code>//鼠标按下
$(&quot;#gamecar&quot;).on(&quot;mousedown&quot;,function(ev){
    var ev = ev || window.event;
    var offsetX = ev.offsetX;
    var offsetY = ev.offsetY;
    //鼠标移动
    $(document).on(&quot;mousemove&quot;,function(ev){
        var ev = ev || window.event;
        var carLeft = ev.clientX - offsetX + &quot;px&quot;;
        var carTop = ev.clientY - offsetY + &quot;px&quot;;
        $(&quot;#gamecar&quot;).css({
            left: carLeft,
            top: carTop
        });
    });
    //鼠标移开
    $(document).on(&quot;mouseup&quot;,function(){
        //移除元素所有的事件处理器
        $(document).unbind();
    });
    return false;
});
</code></pre><h2 id="完整代码示范"><a href="#完整代码示范" class="headerlink" title="完整代码示范"></a>完整代码示范</h2><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style&gt;
    *{
        padding: 0;
        margin: 0;
    }
    #div1{
        width: 100px;
        height: 100px;
        background-color: red;
        position: absolute;
        left: 100px;
        top: 200px;
        border-radius: 50%;
        box-shadow: 0 0 2px 3px red;
    }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var div1 = document.getElementById(&apos;div1&apos;);

//鼠标按下
div1.onmousedown = function(ev){
    console.log(&apos;鼠标按下了&apos;);
    var ev = ev || event;

    //获取鼠标距离元素左边和上边的距离
    //方式1:火狐旧版本不兼容
    //var offsetX = ev.offsetX;
    //var offsetY = ev.offsetY;
    //方式2
    var offsetX = ev.clientX - this.offsetLeft;
    var offsetY = ev.clientY - this.offsetTop;

    document.onmousemove = function(ev){

        var ev = ev || event;
        console.log(ev.clientX,ev.clientY);

        div1.style.left = ev.clientX - offsetX + &apos;px&apos;;
        div1.style.top = ev.clientY - offsetY + &apos;px&apos;;
    };

    //鼠标抬起，取消移动事件
    document.onmouseup = function(){
        document.onmouseup = document.onmousemove = null;
    };

    return false;
};

/*
 三步：
 1.元素onmousedown
 2.document.onmousemove
 3.documnet.onmouseup
 **/
&lt;/script&gt;
&lt;/html&gt;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>http://ningbo00.top/2016/10/10/reg/</url>
      <content type="html"><![CDATA[<h1 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h1><h2 id="正则表达式的目的"><a href="#正则表达式的目的" class="headerlink" title="正则表达式的目的"></a>正则表达式的目的</h2><ol>
<li>给定的字符串是否符合正则表达式的过滤逻辑（匹配）</li>
<li>可以通过正则表达式，从字符串中获取我们想要的特定部分</li>
</ol>
<h2 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h2><ol>
<li>灵活性、逻辑性和功能性非常的强</li>
<li>可以迅速地用极简的方式达到字符串的复杂控制</li>
</ol>
<h2 id="JavaScript-RegExp对象"><a href="#JavaScript-RegExp对象" class="headerlink" title="JavaScript RegExp对象"></a>JavaScript RegExp对象</h2><p>RegExp对象用于规定在文本中检索的内容<br>当检索某个文件时，可以用RegExp这种模式来描述要检索的内容<br>复杂的模式可用于解析、格式检查、替换等等</p>
<hr>
<h3 id="JavaScript中正则表达式的声明方式"><a href="#JavaScript中正则表达式的声明方式" class="headerlink" title="JavaScript中正则表达式的声明方式"></a>JavaScript中正则表达式的声明方式</h3><p>创建RegExp对象的语法</p>
<pre><code>var reg = new RegExp(参数1，参数2)
</code></pre><ul>
<li>参数1：正则公式（匹配原则）也可以是要匹配的字符串</li>
<li>参数2：修饰符，可以省略<ul>
<li>常用修饰符：i:忽略大小写 g:全局匹配 m:执行多行匹配(结合^ $使用)</li>
</ul>
</li>
</ul>
<h3 id="直接量语法"><a href="#直接量语法" class="headerlink" title="直接量语法"></a>直接量语法</h3><pre><code>var reg3 = /参数1/修饰符；
</code></pre><ul>
<li>参数不能写成字符串</li>
<li>参数1：匹配原则</li>
<li>参数2：可选，修饰符（i g m）</li>
</ul>
<h3 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h3><ul>
<li>[abc]：查找方括号之间的任何字符。</li>
<li>[^abc]：查找任何不在方括号之间的字符。</li>
<li>[0-9]：查找任何从 0 至 9 的数字。</li>
<li>[a-z]：查找任何从小写 a 到小写 z 的字符。</li>
<li>[A-Z]：查找任何从大写 A 到大写 Z 的字符。</li>
<li>[A-z]：查找任何从大写 A 到小写 z 的字符。</li>
<li>[adgk]： 查找给定集合内的任何字符。</li>
<li>[^adgk]：查找给定集合外的任何字符。</li>
<li>(red|blue|green)：查找任何指定的选项。</li>
</ul>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>元字符（Metacharacter）是拥有特殊含义的字符：</p>
<ul>
<li>.：查找单个字符，除了换行和行结束符。</li>
<li>\w：查找单词字符。</li>
<li>\W：查找非单词字符。</li>
<li>\d：查找数字。</li>
<li>\D：查找非数字字符。</li>
<li>\s：查找空白字符。</li>
<li>\S：查找非空白字符。</li>
<li>\b：匹配单词边界。</li>
<li>\B：匹配非单词边界。</li>
<li>\0：查找 NUL 字符。</li>
</ul>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul>
<li>n+ 匹配任何包含至少一个 n 的字符串。</li>
<li>n* 匹配任何包含零个或多个 n 的字符串。</li>
<li>n? 匹配任何包含零个或一个 n 的字符串。</li>
<li>n{X} 匹配包含 X 个 n 的序列的字符串。</li>
<li>n{X,Y} 匹配包含 X 或 Y 个 n 的序列的字符串。</li>
<li>n{X,} 匹配包含至少 X 个 n 的序列的字符串。</li>
<li>n$ 匹配任何结尾为 n 的字符串。</li>
<li>^n 匹配任何开头为 n 的字符串。</li>
<li>?=n 匹配任何其后紧接指定字符串 n 的字符串。</li>
<li>?!n 匹配任何其后没有紧接指定字符串 n 的字符串。</li>
</ul>
<h3 id="RegExp对象的方法"><a href="#RegExp对象的方法" class="headerlink" title="RegExp对象的方法"></a>RegExp对象的方法</h3><p>regExp对象有3个方法：test()、exec()、compile()<br>test()方法检索字符串中的指定值。返回时true或false<br>exec()方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回null<br>compile()方法用于改变RegExp。既可以改变检索模式，也可以添加或删除第二个参数</p>
<h3 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h3><ul>
<li>search 检索与正则表达式相匹配的值。</li>
<li>match 找到一个或多个正则表达式的匹配。</li>
<li>replace 替换与正则表达式匹配的子串。</li>
<li>split 把字符串分割为字符串数组。</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
